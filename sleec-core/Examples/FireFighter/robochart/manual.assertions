package SystemAssertions 
import System 

//timed assertion Check1 : RC refines Spec1 in the traces model 
//timed assertion Check2 : RC refines Spec2 in the traces model 
//timed assertion Check3 : RC refines Spec3 in the traces model 
  

timed csp Instantiations associated to UAV csp-begin

-- OPERATION BOUNDS

-- MODULE CONSTANTS

-- CONTROLLER CONSTANTS

-- STATEMACHINE CONSTANTS

-- OPERATION CONSTANTS

-- BASIC TYPES
-- generate nat
nametype core_nat = { 0..2}
-- generate int
nametype core_int = { -2..2}
-- generate string
nametype core_string = LSeq(Char,2)
-- generate boolean
nametype core_boolean = Bool
-- generate real
nametype core_real = union({ -2..2},TemperatureRange) 

-- Change the value below if needed.
nametype TemperatureRange = { -2..36}
-- VECTOR TYPES AND OPERATIONS
 

-- CLOCKS
-- generate core_clock_type
nametype core_clock_type = {0..301}

-- generate const_UAV_poll
const_UAV_poll = 1

-- generate const_UAV_goHomeDelay
const_UAV_goHomeDelay = 2

-- OPERATION CONSTANTS

-- BASIC TYPES

-- generate const_UAV_init
const_UAV_init = 1

-- BASIC FUNCTIONS			
-- generate Plus
Plus(e1,e2,T) = if member(e1+e2,T) then e1+e2 else e1

-- generate Minus
Minus(e1,e2,T) = if member(e1-e2,T) then e1-e2 else e1

-- generate Mult
Mult(e1,e2,T) = if member(e1*e2,T) then e1*e2 else e1

-- generate Div
Div(e1,e2,T) = if member(e1/e2,T) then e1/e2 else e1

-- generate Modulus
Modulus(e1,e2,T) = if member(e1%e2,T) then e1%e2 else e1

-- generate Neg
Neg(e1,T) = if member(-e1,T) then -e1 else e1

-- generate vt
vt(x__,Time_seconds) = x__
vt(x__,Time_minutes) = x__*60

-- Additional tock-CSP operators not defined built-in by RoboTool:
et(_) = 0

Timed(et) {
-- Strict timed interrupt
channel finishedp__, finishedq__, timeout__

-- Behaves as P__ until it either terminates, or, after exactly
-- d__ time units behaves as Q__.
TTimedInterrupt(P__,d__,Q__) =
  ((((P__; EDeadline(finishedp__,0))
    /\ timeout__ -> (RUN(diff(Events,{finishedp__,finishedq__,timeout__}))
                   /\ finishedq__ -> SKIP)
   )
     [| Events |]
   TRT__(d__,Q__)) \ {finishedp__, finishedq__, timeout__}); SKIP
}

-- Auxiliary counter for TTimedInterrupt definition above.
TRT__(d__,Q__) =
	if d__ > 0
        then RUN(diff(Events,{finishedp__, finishedq__, timeout__, tock}))
		  	 /\ (finishedp__ -> SKIP [] tock -> TRT__(d__-1,Q__))
	    else timeout__ -> Q__; finishedq__ -> SKIP

Rename(P__) = 
	P__[[	UAV::BatteryCritical.in<-BatteryCritical,
			UAV::CameraStart.out<-CameraStart,
			UAV::SoundAlarm.out<-SoundAlarm,
			UAV::GoHome.out<-GoHome,
			UAV::personNearby.in<-personNearby,
			UAV::temperature.in<-temperature,
			UAV::windSpeed.in.WindScale2RC(x__) <- windSpeed.x__ | x__ <- STwindSpeed
	]]

WindScale2RC(light) = windScale_light
WindScale2RC(moderate) = windScale_moderate
WindScale2RC(strong) = windScale_strong

-- Original SLEEC formulation below (from Firefighter-finalset.csp)

channel BatteryCritical
channel CameraStart
channel SoundAlarm
channel GoHome
channel personNearby : Bool
channel temperature : TemperatureRange
channel windSpeed : STwindSpeed

datatype STwindSpeed = light | moderate | strong

STlewindSpeed(v1windSpeed, v2windSpeed) =
	if v1windSpeed == light then true
	else (if v1windSpeed == moderate then not member(v2windSpeed,{light})
	else v2windSpeed == strong)
	
STeqwindSpeed(v1windSpeed, v2windSpeed) =
	v1windSpeed == v2windSpeed
	
STltwindSpeed(v1windSpeed, v2windSpeed) =
	STlewindSpeed(v1windSpeed, v2windSpeed) and STnewindSpeed(v1windSpeed, v2windSpeed)
	
STgtwindSpeed(v1windSpeed, v2windSpeed) =
	STltwindSpeed(v2windSpeed, v1windSpeed)
	
STnewindSpeed(v1windSpeed, v2windSpeed) =
	not STeqwindSpeed(v1windSpeed, v2windSpeed)
	
STgewindSpeed(v1windSpeed, v2windSpeed) =
	STltwindSpeed(v2windSpeed, v1windSpeed)

ALARMDEADLINE = 30
	
Capabilities = 
  {| BatteryCritical,
     CameraStart,
     SoundAlarm,
     GoHome,
  	 personNearby,
  	 temperature,
  	 windSpeed
  |}
Measures =
  {| personNearby,
     temperature,
     windSpeed
  |}

datatype Measure = 
	m_personNearby | 
	m_temperature | 
	m_windSpeed

m2in(m_personNearby) = {|personNearby|}
m2in(m_temperature) = {|temperature|}
m2in(m_windSpeed) = {|windSpeed|}

GMemory(m__,i__,o__) =
	let
        Mem = m__?x__ -> (Provide(x__) /\ tock -> Mem)
        Provide(x__) = RUN(union({|i__.x__|},o__))
    within
        Mem

GMem(m_personNearby,o__) = GMemory(personNearby,i_personNearby,o__)
GMem(m_temperature,o__) = GMemory(temperature,i_temperature,o__)
GMem(m_windSpeed,o__) = GMemory(windSpeed,i_windSpeed,o__)

GMemExternal(m_personNearby) = {|personNearby|}
GMemExternal(m_temperature) = {|temperature|}
GMemExternal(m_windSpeed) = {|windSpeed|}

GMemInternal(m_personNearby) = {|i_personNearby|}
GMemInternal(m_temperature) = {|i_temperature|}
GMemInternal(m_windSpeed) = {|i_windSpeed|}

GMemHide(P__,m_personNearby) = P__[[personNearby <- i_personNearby]]
GMemHide(P__,m_temperature) = P__[[temperature <- i_temperature]]
GMemHide(P__,m_windSpeed) = P__[[windSpeed <- i_windSpeed]]

GMemorySet(s__,o__) = [| union({tock},o__) |] e__ : s__ @ GMem(e__,o__)
GMemoryRenameSet(P__,s__) = GMemoryRenameSeq(P__,seq(s__))
GMemoryRenameSeq(P__,<>) = P__
GMemoryRenameSeq(P__,<s__>^ms) = GMemHide(GMemoryRenameSeq(P__,ms),s__)

GMemoryInternalEvents(s__) = { e__ | m__ <- s__, e__ <- GMemInternal(m__) }
GMemoryExternalEvents(s__) = { e__ | m__ <- s__, e__ <- GMemExternal(m__) }

ARuleToGMeasureSet(alpha) = { m__ | m__ <- Measure, inter(m2in(m__),alpha) == m2in(m__) }
	
SUVEvents = Capabilities

instance MSN = model_shifting(Capabilities)
Timed(et) {

-- Rule1 when CameraStart and (personNearby) then SoundAlarm 

Rule1 = TriggerRule1; MonitoringRule1; Rule1

TriggerRule1 = let
	MTrigger = StartBy(personNearby?vpersonNearby ->
		if (vpersonNearby) then SKIP else TriggerRule1
	,0)
within CameraStart -> MTrigger [] SoundAlarm -> TriggerRule1

MonitoringRule1 = SoundAlarm -> SKIP

-- alphabet for Rule1 
ARule1 = {|CameraStart, personNearby, SoundAlarm|}
SLEECRule1 = timed_priority(Rule1)


-- Rule2 when CameraStart and (personNearby) then SoundAlarm within 2 seconds 

Rule2 = TriggerRule2; MonitoringRule2; Rule2

TriggerRule2 = let
	MTrigger = StartBy(personNearby?vpersonNearby ->
		if (vpersonNearby) then SKIP else TriggerRule2
	,0)
within CameraStart -> MTrigger [] SoundAlarm -> TriggerRule2

MonitoringRule2 = StartBy(SoundAlarm -> SKIP,(2 * 1))

-- alphabet for Rule2 
ARule2 = {|CameraStart, personNearby, SoundAlarm|}
SLEECRule2 = timed_priority(Rule2)


-- Rule3 when SoundAlarm then not GoHome within 5 minutes 

Rule3 = TriggerRule3; MonitoringRule3; Rule3

TriggerRule3 = SoundAlarm -> SKIP [] GoHome -> TriggerRule3

MonitoringRule3 = WAIT((5*60))

-- alphabet for Rule3 
ARule3 = {|GoHome, SoundAlarm|}
SLEECRule3 = timed_priority(Rule3)


-- Rule4 when CameraStart then SoundAlarm 
-- unless (personNearby) then GoHome
-- unless ((temperature) > (35))

Rule4 = TriggerRule4; MonitoringRule4; Rule4

TriggerRule4 = CameraStart -> SKIP [] SoundAlarm -> TriggerRule4 [] GoHome -> TriggerRule4

MonitoringRule4 = let
	Monitoring1 = SoundAlarm -> SKIP
	Monitoring2 = GoHome -> SKIP
	Monitoring3 = SKIP -- Changed in new revision of the semantics.
		-- CameraStart -> MonitoringRule4
		-- [] personNearby?x -> Monitoring3
		-- [] temperature?x -> Monitoring3
		-- [] SoundAlarm -> Monitoring3
		-- [] GoHome -> Monitoring3
within StartBy(personNearby?vpersonNearby ->
	StartBy(temperature?vtemperature ->
		if ((vtemperature) > (35)) then Monitoring3
		else (if (vpersonNearby) then Monitoring2
		else (Monitoring1))
	,0)
,0)

-- alphabet for Rule4 
ARule4 = {|CameraStart, GoHome, personNearby, temperature, SoundAlarm|}
SLEECRule4 = timed_priority(Rule4)

-- For the measures, we can define an environment process that holds
-- the value of each measure, so that the order in which they are
-- read is masquerared for the purposes of verification.

channel i_personNearby : Bool
channel i_temperature : TemperatureRange
channel i_windSpeed : STwindSpeed

CapabilitiesSUV =
  {|
  	BatteryCritical,
  	CameraStart,
  	SoundAlarm,
  	GoHome
  |}
}
csp-end 

timed csp RC1 csp-begin
Timed(et) {
	RC1 = timed_priority(
		let
			AlphaRule = ARule1
			Measures = ARuleToGMeasureSet(AlphaRule)
		within
			(
				GMemoryRenameSet(Rename(Rename(UAV::O__(1))\{|UAV::terminate|});STOP,Measures)
				[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
				GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
			) \GMemoryInternalEvents(Measures)
	)
}
csp-end

timed csp RSpec1 csp-begin
Timed(et) {
RSpec1 = timed_priority(
			let
				AlphaRule = ARule1
				Measures = ARuleToGMeasureSet(AlphaRule)
			within
				(
					GMemoryRenameSet(SLEECRule1 ||| CRUN(diff(SUVEvents,AlphaRule)),Measures)
					[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
					GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
				) \GMemoryInternalEvents(Measures)
	)
}
csp-end 

timed csp RC2 csp-begin
Timed(et) {
	RC2 = timed_priority(
		let
			AlphaRule = ARule2
			Measures = ARuleToGMeasureSet(AlphaRule)
		within
			(
				GMemoryRenameSet(Rename(Rename(UAV::O__(1))\{|UAV::terminate|});STOP,Measures)
				[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
				GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
			) \GMemoryInternalEvents(Measures)
	)
}
csp-end

timed csp RSpec2 csp-begin
Timed(et) {
RSpec2 = timed_priority(
			let
				AlphaRule = ARule2
				Measures = ARuleToGMeasureSet(AlphaRule)
			within
				(
					GMemoryRenameSet(SLEECRule2 ||| CRUN(diff(SUVEvents,AlphaRule)),Measures)
					[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
					GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
				) \GMemoryInternalEvents(Measures)
	)
}
csp-end 

timed csp RSpec3 csp-begin
Timed(et) {
RSpec3 = timed_priority(
			let
				AlphaRule = ARule3
				Measures = ARuleToGMeasureSet(AlphaRule)
			within
				(
					GMemoryRenameSet(SLEECRule3 ||| CRUN(diff(SUVEvents,AlphaRule)),Measures)
					[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
					GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
				) \GMemoryInternalEvents(Measures)
	)
}
csp-end 

timed csp RC3 csp-begin
Timed(et) {
	RC3 = timed_priority(
		let
			AlphaRule = ARule3
			Measures = ARuleToGMeasureSet(AlphaRule)
		within
			(
				GMemoryRenameSet(Rename(Rename(UAV::O__(1))\{|UAV::terminate|});STOP,Measures)
				[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
				GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
			) \GMemoryInternalEvents(Measures)
	)
}
csp-end

timed csp RSpec4 csp-begin
Timed(et) {
RSpec4 = timed_priority(
			let
				AlphaRule = ARule4
				Measures = ARuleToGMeasureSet(AlphaRule)
			within
				(
					GMemoryRenameSet(SLEECRule4 ||| CRUN(diff(SUVEvents,AlphaRule)),Measures)
					[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
					GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
				) \GMemoryInternalEvents(Measures)
	)
}
csp-end 

timed csp RC4 csp-begin
Timed(et) {
	RC4 = timed_priority(
		let
			AlphaRule = ARule4
			Measures = ARuleToGMeasureSet(AlphaRule)
		within
			(
				GMemoryRenameSet(Rename(Rename(UAV::O__(1))\{|UAV::terminate|});STOP,Measures)
				[| union(diff(SUVEvents,GMemoryExternalEvents(Measures)),GMemoryInternalEvents(Measures)) |]
				GMemorySet(Measures,diff(SUVEvents,GMemoryExternalEvents(Measures)))
			) \GMemoryInternalEvents(Measures)
	)
}
csp-end

timed assertion RCheck1 : RC1 refines RSpec1 in the traces model
timed assertion RCheck2 : RC2 refines RSpec2 in the traces model
timed assertion RCheck3 : RC3 refines RSpec3 in the traces model
timed assertion RCheck4 : RC4 refines RSpec4 in the traces model
