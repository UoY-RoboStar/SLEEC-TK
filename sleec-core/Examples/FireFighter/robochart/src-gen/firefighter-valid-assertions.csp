-- ASSERTIONS --
include "tick-tock.csp"
include "instantiations.csp"
include "firefighter-valid.csp"			
Timed(OneStep) {

-- Checking FRule1 with FRule6:
intersectionFRule1FRule6 = 
  let
    EnvFRule1FRule6 = EnvbatteryCharged||| EnvpersonNearby
||| Envtemperature
    EnvbatteryCharged = batteryCharged?x__ -> VEnvbatteryCharged(x__)
    VEnvbatteryCharged(x__) = batteryCharged!x__ -> VEnvbatteryCharged(x__) 
    EnvpersonNearby = personNearby?x__ -> VEnvpersonNearby(x__)
    VEnvpersonNearby(x__) = personNearby!x__ -> VEnvpersonNearby(x__) 
    Envtemperature = temperature?x__ -> VEnvtemperature(x__)
    VEnvtemperature(x__) = temperature!x__ -> VEnvtemperature(x__) 
  within
  
  (FRule1[|diff(inter({|batteryCharged, GoHome, SoundAlarm|}, {|GoHome, personNearby, temperature, BatteryCritical, SoundAlarm|}),{|batteryCharged,personNearby,temperature|})|]FRule6)
  [| {|batteryCharged,personNearby,temperature|} |]
  	EnvFRule1FRule6
  SLEECFRule1FRule6 = timed_priority(intersectionFRule1FRule6)
					
  assert SLEECFRule1FRule6:[deadlock-free]					
  			
  SLEECFRule1FRule6CF   = prioritise(
  	timed_priority(intersectionFRule1FRule6)
  	[[ tock <- tock, tock <- tock' ]],
  	<diff(Events,{|tock',tock|}),{|tock|}>)\{|tock|}
										
  assert SLEECFRule1FRule6CF  :[divergence-free]
  
FRule1_wrt_FRule6 =
let
-- The external 'm' channels for every measure of (FRule1 or FRule6)
MemoryExternalEvents = {|batteryCharged,personNearby,temperature|}-- The internal 'i_m' channels for every measure of (FRule1 or FRule6)
MemoryInternalEvents = {|i_batteryCharged,i_personNearby,i_temperature|}-- Common events of FRule1 and FRule6
CommonEvents = union(AFRule1,AFRule6)
-- Common events of FRule1 and FRule6, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_batteryCharged(CommonProvideEvents) [| CommonProvideEvents |] (Mem_personNearby(CommonProvideEvents)
 [| CommonProvideEvents |] Mem_temperature(CommonProvideEvents)
)
)
MemoryInOrder = batteryCharged?x__-> personNearby?x__ 
-> temperature?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule1[[ batteryCharged <- i_batteryCharged,
personNearby <- i_personNearby
,
temperature <- i_temperature
]]
		)
		[| union(diff(AFRule1,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
FRule6_wrt_FRule1 =
let
-- The external 'm' channels for every measure of (FRule6 or FRule1)
MemoryExternalEvents = {|batteryCharged,personNearby,temperature|}-- The internal 'i_m' channels for every measure of (FRule6 or FRule1)
MemoryInternalEvents = {|i_batteryCharged,i_personNearby,i_temperature|}-- Common events of FRule6 and FRule1
CommonEvents = union(AFRule6,AFRule1)
-- Common events of FRule6 and FRule1, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_batteryCharged(CommonProvideEvents) [| CommonProvideEvents |] (Mem_personNearby(CommonProvideEvents)
 [| CommonProvideEvents |] Mem_temperature(CommonProvideEvents)
)
)
MemoryInOrder = batteryCharged?x__-> personNearby?x__ 
-> temperature?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule6[[ batteryCharged <- i_batteryCharged,
personNearby <- i_personNearby
,
temperature <- i_temperature
]]
		)
		[| union(diff(AFRule6,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
assert not FRule1_wrt_FRule6 [T= FRule6_wrt_FRule1 
assert not FRule6_wrt_FRule1 [T= FRule1_wrt_FRule6 

-- Checking FRule2 with FRule6:
intersectionFRule2FRule6 = 
  let
    EnvFRule2FRule6 = EnvpersonNearby||| Envtemperature
    EnvpersonNearby = personNearby?x__ -> VEnvpersonNearby(x__)
    VEnvpersonNearby(x__) = personNearby!x__ -> VEnvpersonNearby(x__) 
    Envtemperature = temperature?x__ -> VEnvtemperature(x__)
    VEnvtemperature(x__) = temperature!x__ -> VEnvtemperature(x__) 
  within
  
  (FRule2[|diff(inter({|BatteryCritical, BatteryAlarmandGoHome|}, {|GoHome, personNearby, temperature, BatteryCritical, SoundAlarm|}),{|personNearby,temperature|})|]FRule6)
  [| {|personNearby,temperature|} |]
  	EnvFRule2FRule6
  SLEECFRule2FRule6 = timed_priority(intersectionFRule2FRule6)
					
  assert SLEECFRule2FRule6:[deadlock-free]					
  			
  SLEECFRule2FRule6CF   = prioritise(
  	timed_priority(intersectionFRule2FRule6)
  	[[ tock <- tock, tock <- tock' ]],
  	<diff(Events,{|tock',tock|}),{|tock|}>)\{|tock|}
										
  assert SLEECFRule2FRule6CF  :[divergence-free]
  
FRule2_wrt_FRule6 =
let
-- The external 'm' channels for every measure of (FRule2 or FRule6)
MemoryExternalEvents = {|personNearby,temperature|}-- The internal 'i_m' channels for every measure of (FRule2 or FRule6)
MemoryInternalEvents = {|i_personNearby,i_temperature|}-- Common events of FRule2 and FRule6
CommonEvents = union(AFRule2,AFRule6)
-- Common events of FRule2 and FRule6, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_personNearby(CommonProvideEvents) [| CommonProvideEvents |] Mem_temperature(CommonProvideEvents)
)
MemoryInOrder = personNearby?x__-> temperature?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule2[[ personNearby <- i_personNearby,
temperature <- i_temperature
]]
		)
		[| union(diff(AFRule2,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
FRule6_wrt_FRule2 =
let
-- The external 'm' channels for every measure of (FRule6 or FRule2)
MemoryExternalEvents = {|personNearby,temperature|}-- The internal 'i_m' channels for every measure of (FRule6 or FRule2)
MemoryInternalEvents = {|i_personNearby,i_temperature|}-- Common events of FRule6 and FRule2
CommonEvents = union(AFRule6,AFRule2)
-- Common events of FRule6 and FRule2, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_personNearby(CommonProvideEvents) [| CommonProvideEvents |] Mem_temperature(CommonProvideEvents)
)
MemoryInOrder = personNearby?x__-> temperature?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule6[[ personNearby <- i_personNearby,
temperature <- i_temperature
]]
		)
		[| union(diff(AFRule6,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
assert not FRule2_wrt_FRule6 [T= FRule6_wrt_FRule2 
assert not FRule6_wrt_FRule2 [T= FRule2_wrt_FRule6 

-- Checking FRule3 with FRule8:
intersectionFRule3FRule8 = 
  let
    EnvFRule3FRule8 = EnvdetectPersonFallen||| Envauthorized
    EnvdetectPersonFallen = detectPersonFallen?x__ -> VEnvdetectPersonFallen(x__)
    VEnvdetectPersonFallen(x__) = detectPersonFallen!x__ -> VEnvdetectPersonFallen(x__) 
    Envauthorized = authorized?x__ -> VEnvauthorized(x__)
    VEnvauthorized(x__) = authorized!x__ -> VEnvauthorized(x__) 
  within
  
  (FRule3[|diff(inter({|detectPersonFallen, StartMission, SeekHelp|}, {|NotifyError, authorized, StartMission, FinishMission|}),{|detectPersonFallen,authorized|})|]FRule8)
  [| {|detectPersonFallen,authorized|} |]
  	EnvFRule3FRule8
  SLEECFRule3FRule8 = timed_priority(intersectionFRule3FRule8)
					
  assert SLEECFRule3FRule8:[deadlock-free]					
  			
  SLEECFRule3FRule8CF   = prioritise(
  	timed_priority(intersectionFRule3FRule8)
  	[[ tock <- tock, tock <- tock' ]],
  	<diff(Events,{|tock',tock|}),{|tock|}>)\{|tock|}
										
  assert SLEECFRule3FRule8CF  :[divergence-free]
  
FRule3_wrt_FRule8 =
let
-- The external 'm' channels for every measure of (FRule3 or FRule8)
MemoryExternalEvents = {|detectPersonFallen,authorized|}-- The internal 'i_m' channels for every measure of (FRule3 or FRule8)
MemoryInternalEvents = {|i_detectPersonFallen,i_authorized|}-- Common events of FRule3 and FRule8
CommonEvents = union(AFRule3,AFRule8)
-- Common events of FRule3 and FRule8, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_detectPersonFallen(CommonProvideEvents) [| CommonProvideEvents |] Mem_authorized(CommonProvideEvents)
)
MemoryInOrder = detectPersonFallen?x__-> authorized?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule3[[ detectPersonFallen <- i_detectPersonFallen,
authorized <- i_authorized
]]
		)
		[| union(diff(AFRule3,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
FRule8_wrt_FRule3 =
let
-- The external 'm' channels for every measure of (FRule8 or FRule3)
MemoryExternalEvents = {|detectPersonFallen,authorized|}-- The internal 'i_m' channels for every measure of (FRule8 or FRule3)
MemoryInternalEvents = {|i_detectPersonFallen,i_authorized|}-- Common events of FRule8 and FRule3
CommonEvents = union(AFRule8,AFRule3)
-- Common events of FRule8 and FRule3, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_detectPersonFallen(CommonProvideEvents) [| CommonProvideEvents |] Mem_authorized(CommonProvideEvents)
)
MemoryInOrder = detectPersonFallen?x__-> authorized?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule8[[ detectPersonFallen <- i_detectPersonFallen,
authorized <- i_authorized
]]
		)
		[| union(diff(AFRule8,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
assert not FRule3_wrt_FRule8 [T= FRule8_wrt_FRule3 
assert not FRule8_wrt_FRule3 [T= FRule3_wrt_FRule8 

-- Checking FRule4 with FRule5:
intersectionFRule4FRule5 = 
  let
    EnvFRule4FRule5 = EnvhumanDetected||| EnvanimalDetected
    EnvhumanDetected = humanDetected?x__ -> VEnvhumanDetected(x__)
    VEnvhumanDetected(x__) = humanDetected!x__ -> VEnvhumanDetected(x__) 
    EnvanimalDetected = animalDetected?x__ -> VEnvanimalDetected(x__)
    VEnvanimalDetected(x__) = animalDetected!x__ -> VEnvanimalDetected(x__) 
  within
  
  (FRule4[|diff(inter({|CameraStart, humanDetected, RemainAnonymous|}, {|CameraStart, humanDetected, animalDetected, ReportLocation|}),{|humanDetected,animalDetected|})|]FRule5)
  [| {|humanDetected,animalDetected|} |]
  	EnvFRule4FRule5
  SLEECFRule4FRule5 = timed_priority(intersectionFRule4FRule5)
					
  assert SLEECFRule4FRule5:[deadlock-free]					
  			
  SLEECFRule4FRule5CF   = prioritise(
  	timed_priority(intersectionFRule4FRule5)
  	[[ tock <- tock, tock <- tock' ]],
  	<diff(Events,{|tock',tock|}),{|tock|}>)\{|tock|}
										
  assert SLEECFRule4FRule5CF  :[divergence-free]
  
FRule4_wrt_FRule5 =
let
-- The external 'm' channels for every measure of (FRule4 or FRule5)
MemoryExternalEvents = {|humanDetected,animalDetected|}-- The internal 'i_m' channels for every measure of (FRule4 or FRule5)
MemoryInternalEvents = {|i_humanDetected,i_animalDetected|}-- Common events of FRule4 and FRule5
CommonEvents = union(AFRule4,AFRule5)
-- Common events of FRule4 and FRule5, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_humanDetected(CommonProvideEvents) [| CommonProvideEvents |] Mem_animalDetected(CommonProvideEvents)
)
MemoryInOrder = humanDetected?x__-> animalDetected?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule4[[ humanDetected <- i_humanDetected,
animalDetected <- i_animalDetected
]]
		)
		[| union(diff(AFRule4,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
FRule5_wrt_FRule4 =
let
-- The external 'm' channels for every measure of (FRule5 or FRule4)
MemoryExternalEvents = {|humanDetected,animalDetected|}-- The internal 'i_m' channels for every measure of (FRule5 or FRule4)
MemoryInternalEvents = {|i_humanDetected,i_animalDetected|}-- Common events of FRule5 and FRule4
CommonEvents = union(AFRule5,AFRule4)
-- Common events of FRule5 and FRule4, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_humanDetected(CommonProvideEvents) [| CommonProvideEvents |] Mem_animalDetected(CommonProvideEvents)
)
MemoryInOrder = humanDetected?x__-> animalDetected?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule5[[ humanDetected <- i_humanDetected,
animalDetected <- i_animalDetected
]]
		)
		[| union(diff(AFRule5,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
assert not FRule4_wrt_FRule5 [T= FRule5_wrt_FRule4 
assert not FRule5_wrt_FRule4 [T= FRule4_wrt_FRule5 

-- Checking FRule6 with FRule9:
intersectionFRule6FRule9 = 
  let
    EnvFRule6FRule9 = EnvpersonNearby||| Envtemperature
||| Envdistance
    EnvpersonNearby = personNearby?x__ -> VEnvpersonNearby(x__)
    VEnvpersonNearby(x__) = personNearby!x__ -> VEnvpersonNearby(x__) 
    Envtemperature = temperature?x__ -> VEnvtemperature(x__)
    VEnvtemperature(x__) = temperature!x__ -> VEnvtemperature(x__) 
    Envdistance = distance?x__ -> VEnvdistance(x__)
    VEnvdistance(x__) = distance!x__ -> VEnvdistance(x__) 
  within
  
  (FRule6[|diff(inter({|GoHome, personNearby, temperature, BatteryCritical, SoundAlarm|}, {|distance, SoundWarningMessage, personNearby, OperatorInstruction, SprayWater|}),{|personNearby,temperature,distance|})|]FRule9)
  [| {|personNearby,temperature,distance|} |]
  	EnvFRule6FRule9
  SLEECFRule6FRule9 = timed_priority(intersectionFRule6FRule9)
					
  assert SLEECFRule6FRule9:[deadlock-free]					
  			
  SLEECFRule6FRule9CF   = prioritise(
  	timed_priority(intersectionFRule6FRule9)
  	[[ tock <- tock, tock <- tock' ]],
  	<diff(Events,{|tock',tock|}),{|tock|}>)\{|tock|}
										
  assert SLEECFRule6FRule9CF  :[divergence-free]
  
FRule6_wrt_FRule9 =
let
-- The external 'm' channels for every measure of (FRule6 or FRule9)
MemoryExternalEvents = {|personNearby,temperature,distance|}-- The internal 'i_m' channels for every measure of (FRule6 or FRule9)
MemoryInternalEvents = {|i_personNearby,i_temperature,i_distance|}-- Common events of FRule6 and FRule9
CommonEvents = union(AFRule6,AFRule9)
-- Common events of FRule6 and FRule9, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_personNearby(CommonProvideEvents) [| CommonProvideEvents |] (Mem_temperature(CommonProvideEvents)
 [| CommonProvideEvents |] Mem_distance(CommonProvideEvents)
)
)
MemoryInOrder = personNearby?x__-> temperature?x__ 
-> distance?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule6[[ personNearby <- i_personNearby,
temperature <- i_temperature
,
distance <- i_distance
]]
		)
		[| union(diff(AFRule6,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
FRule9_wrt_FRule6 =
let
-- The external 'm' channels for every measure of (FRule9 or FRule6)
MemoryExternalEvents = {|personNearby,temperature,distance|}-- The internal 'i_m' channels for every measure of (FRule9 or FRule6)
MemoryInternalEvents = {|i_personNearby,i_temperature,i_distance|}-- Common events of FRule9 and FRule6
CommonEvents = union(AFRule9,AFRule6)
-- Common events of FRule9 and FRule6, except for those of measures:
CommonProvideEvents = diff(CommonEvents,MemoryExternalEvents)
 -- The memory process
Memory = (Mem_personNearby(CommonProvideEvents) [| CommonProvideEvents |] (Mem_temperature(CommonProvideEvents)
 [| CommonProvideEvents |] Mem_distance(CommonProvideEvents)
)
)
MemoryInOrder = personNearby?x__-> temperature?x__ 
-> distance?x__ 
-> MemoryInOrder
within
timed_priority(
				 (
					(
					SLEECFRule9[[ personNearby <- i_personNearby,
temperature <- i_temperature
,
distance <- i_distance
]]
		)
		[| union(diff(AFRule9,MemoryExternalEvents),MemoryInternalEvents) |]
		(
		-- Generalised parallel composition of all measure processes
		Memory
		[| MemoryExternalEvents |]
		MemoryInOrder
	    )
	 ) \MemoryInternalEvents
) 
assert not FRule6_wrt_FRule9 [T= FRule9_wrt_FRule6 
assert not FRule9_wrt_FRule6 [T= FRule6_wrt_FRule9 

}
