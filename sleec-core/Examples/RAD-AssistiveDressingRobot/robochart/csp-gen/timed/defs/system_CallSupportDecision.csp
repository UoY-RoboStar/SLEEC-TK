
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 02-11-2023 11:20:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--

-- compileSelfContainedOperation
module OP_system_CallSupportDecision
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0|
	              NID_CallSupport|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel assentToSupportCalls__: NIDS.InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel SupportCalled__: NIDS.InOut
	channel SupportCalled: InOut
	
	-- Declaring call and ret events for undefined operations
	channel CallSupportCall
	
	enterSS = {|
	i0::enter,
	f0::enter,
	CallSupport::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	f0::entered,
	CallSupport::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	assentToSupportCalls,
		SupportCalled
	,	CallSupportCall
		, share__
		|}
	
	channel clockReset, clockResetL, clockResetR 
	
	localClockResets = {||}
	
	
	channel get_CLID_CallSupport : core_clock_type 
	channel get_CLID_f0 : core_clock_type 
	--channel increment__
	
	CLID_CallSupport_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	CLID_f0_clock_type(id__) = 
		let
			max = (clock_type_max(Union({
	{}
	}))+1)
		ctype = {0..max}
	within
		if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
	
	
	
		-- Nodes --
		-- declaring all nodes
		
		----------------------------------------------------------------------
		-- Initial: i0
		module i0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Final state: f0
		module f0
		
		exports
		
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- State: CallSupport
		module CallSupport
		
		enterSS = {}
		
		enteredSS = {}
		
		exports
		
			--  Declarations
			
			channel enter, entered, interrupt
			channel enteredL, enteredR
			
							
			
			--channel increment__
			
			
			--	Nodes
			-- declaring all nodes
			
			
			Timed(OneStep) {
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__CallSupport(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__CallSupport(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
				
				-- Clocks
				
				StateClocks(id__) = terminate -> SKIP
				
				stateClockSync = {||}
			}
		
		endmodule
		----------------------------------------------------------------------
		
		
		----------------------------------------------------------------------
		-- Junction: j0
		module j0
		exports
		
			channel enter, interrupt
			
			Timed(OneStep) {
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			}
		
		endmodule
		----------------------------------------------------------------------
		
		-- END of Nodes --
		
		Timed(OneStep) {
		-- Operation calls --
		-- Only the undefined operations are declared here.
		-- If the state machine is in isolation, all required operations will be undefined.
		-- If it is in the context of a controller, the required operations not provided by the
		-- controller will be declared here, and the defined operations will be defined in the
		-- context of the Controller module, and therefore within scope of the state machine module.
		CALL__CallSupport(id__) = EDeadline(CallSupportCall,0)
		
		-- END of Operation calls --
	
		-- STM processes
		STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__) \ {terminate}
		
		STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
		Stateful(id__) \ {terminate}
		
		-- Transitions
		Transitions(id__) = ((let
			Trans = share__choice(get_assent?assent -> TimeOut_1(
				 (share__ -> SKIP
				 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((Deadline(true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP))),0) ; j0::enter -> SKIP))))
				 [] dbisim((true)&(SupportCalled__!NID_CallSupport.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
				 [] dbisim((assent)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; CallSupport::enter -> SKIP))))
				 [] dbisim(((not (assent)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
				 []
				 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
				 []
				 terminate -> SKIP
				 )
			,SKIP);Trans
			)
		within
			Trans [|{terminate}|> SKIP
		)
		)
		
		-- Stateful
		-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
		
		-- Named process definitions
		MachineBody(id__) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					CallSupport::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::D__(id__)
						   [| { share__, terminate } |] (
						   f0::D__(id__)
						   [| { share__, terminate } |] (
						   ((
						    ((CallSupport::D__(id__))
						     [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						    )
						    [| union({|CallSupport::entered,CallSupport::interrupt,terminate|},{|share__
						   |}) |]
						    (((-- RULE stateDeadlines(n:State, ts:Set<Transitions>) : TimedCSPProcess
						     let
						     	sTransitionDeadline_t1 =
						     		let
						     			Inactive = share__choice(CallSupport::entered -> Entered)
						     			
						     			Entered = Active /\ (CallSupport::interrupt -> Inactive)
						     			
						     			Active =
						     				(ShareUntilTrue;
						     				 (ShareUntilFalse /\ (WAIT(60);USTOP)) ;
						     				 Active
						     				)
						     		
						     			ShareUntilTrue = 
						     				TimeOut_1(
						     					((true)&SKIP
						     				 	[]
						     				 	(not true)&share__->ShareUntilTrue),ShareUntilTrue)
						     		
						     			ShareUntilFalse = 
						     				TimeOut_1(
						     					((not true)&SKIP
						     				 	[]
						     				 	(true)&share__->ShareUntilFalse),ShareUntilFalse)
						     		within
						     			Inactive /\ terminate -> SKIP
						     within
						     	[| {CallSupport::entered, CallSupport::interrupt, share__, terminate} |] proc__ : {sTransitionDeadline_t1} @ proc__
						    )
						    )
						     [[ share__ <- x__ | x__ <- {| share__ |} ]]
						    )
						   )
						   )
						   [| { share__, terminate } |] (
						   j0::D__(id__)
						   )
						   )
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[set_assent <- setL_assent]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_assent
						|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
						 )
						)[[setL_assent <- set_assent]]
						)
					)
					 \ hideSet)
					[[
						assentToSupportCalls__.x____ <- assentToSupportCalls,
						SupportCalled__.x____ <- SupportCalled
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_CallSupport,CallSupport::entered|}
			 within
				(MachineBody(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
			)
			)
		
		
		Stateful(id__) = 
			((let
				getsetLocalChannels = {|get_assent,set_assent|}
				clockSync = {||}
			within
				(Behaviour(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- Visible counterparts
		MachineBody_VS_O(id__) = 
			dbisim((
			let
				finalNodesEntered = {|f0::entered|}
			within
				(dbisim((dbisim((let
					-- IMPLEMENTATION NOTE:
					-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
					-- modules for defining the semantics of each node.
					enterSS = {|
					i0::enter,
					f0::enter,
					CallSupport::enter,
					j0::enter
					|}
					hideSet = union(enterSS,{|exit,exited,internal__|})
				within 
					((let
						-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
						-- because CSPM modules are used for the semantics of Node.
						flowevts = union(enterSS,{|exit,exited,interrupt|})
						transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
					within
						((
						 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
						   i0::VS_O__(id__)
						   [| { share__, terminate } |] (
						   f0::VS_O__(id__)
						   [| { share__, terminate } |] (
						   ((
						    ((CallSupport::VS_O__(id__))
						     [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						    )
						    [| union({|CallSupport::entered,CallSupport::interrupt,terminate|},{|share__
						   |}) |]
						    (((-- RULE stateDeadlines(n:State, ts:Set<Transitions>) : TimedCSPProcess
						     let
						     	sTransitionDeadline_t1 =
						     		let
						     			Inactive = share__choice(CallSupport::entered -> Entered)
						     			
						     			Entered = Active /\ (CallSupport::interrupt -> Inactive)
						     			
						     			Active =
						     				(ShareUntilTrue;
						     				 (ShareUntilFalse /\ (WAIT(60);USTOP)) ;
						     				 Active
						     				)
						     		
						     			ShareUntilTrue = 
						     				TimeOut_1(
						     					((true)&SKIP
						     				 	[]
						     				 	(not true)&share__->ShareUntilTrue),ShareUntilTrue)
						     		
						     			ShareUntilFalse = 
						     				TimeOut_1(
						     					((not true)&SKIP
						     				 	[]
						     				 	(true)&share__->ShareUntilFalse),ShareUntilFalse)
						     		within
						     			Inactive /\ terminate -> SKIP
						     within
						     	[| {CallSupport::entered, CallSupport::interrupt, share__, terminate} |] proc__ : {sTransitionDeadline_t1} @ proc__
						    )
						    )
						     [[ share__ <- x__ | x__ <- {| share__ |} ]]
						    )
						   )
						   )
						   [| { share__, terminate } |] (
						   j0::VS_O__(id__)
						   )
						   )
						   )
						 )
						 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
						 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
						 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
						 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
						 )
						  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
						  [[set_assent <- setL_assent]]
						 )
						 [| union(union(union(flowevts,transSync),{terminate}),{|share__
						 			,setL_assent
						|}) |]
						 ((i0::enter -> Transitions(id__))
						  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
						 )
						)[[setL_assent <- set_assent]]
						)
					)
					 \ hideSet)
					[[
						assentToSupportCalls__.x____ <- assentToSupportCalls,
						SupportCalled__.x____ <- SupportCalled
						| x____ <- NIDS
					]]
				)
				)
				 [| union(stateClockSync,{terminate}) |]
				 StateClocks(id__)
				)\diff(stateClockSync,enteredSS))
				 [| {| interrupt |} |] SKIP)
			)
			)
		
		Behaviour_VS_O(id__) = 
			dbisim((let
				stateClockSync = {|get_CLID_CallSupport,CallSupport::entered|}
			 within
				(MachineBody_VS_O(id__) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
			)
			)
		
		
		Stateful_VS_O(id__) = 
			dbisim((let
				getsetLocalChannels = {|get_assent,set_assent|}
				clockSync = {||}
			within
				(Behaviour_VS_O(id__) 
				 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
				 (varMemory(id__) [| {terminate} |] Clocks(id__))
			 	)\union(getsetLocalChannels,clockSync)
			)
			)
		
		
		-- END
		
		-- Memory
		-- Memory variables
		Memory_assent(assent) =
			get_assent!assent -> Memory_assent(assent)
			[]
			set_assent?x__ -> Memory_assent(x__)
			[]
			terminate -> SKIP
		
		-- varMemory process
		varMemory(id__) = Memory_assent(true)
		
		getsetLocalChannels = {|get_assent,set_assent|}
		
		-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
		FVS__(id__) = STM_VS_O(id__) \ localClockResets
		D__(id__) = timed_priority(STM(id__) \ union(internal_events,localClockResets))
		O__(id__) = dbisim(D__(id__))
		VS__(id__) = FVS__(id__)
		VS_O__(id__) = dbisim(FVS__(id__))
		HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
		FVS_C__(id__) = dbisim(timed_priority(STM(id__) \ internal_events))
		HUP__(id__) = timed_priority(O__(id__) [|{share__}|] SKIP)
		
		-- Clocks
		
		Clocks(id__) = terminate -> SKIP
		
		clockSync = {||}
		
		Clock_CLID_CallSupport(id__,x__) = 
			TimeOut_1(
				CallSupport::entered -> Clock_CLID_CallSupport(id__,0)
				[]
				get_CLID_CallSupport!x__ -> Clock_CLID_CallSupport(id__,x__)
				[]
				terminate -> SKIP,Clock_CLID_CallSupport(id__,clock_type_plus(x__,1,CLID_CallSupport_clock_type(id__))))
		
		StateClocks(id__) = dbisim(Clock_CLID_CallSupport(id__,0))
		
		stateClockSync = {|get_CLID_CallSupport,CallSupport::entered|}
		}
			endmodule
