
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 02-11-2023 11:20:40
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module system
exports

module Module
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel UserFallen: InOut
	channel userUnderDressed: InOut.core_boolean
	channel userDistressed: InOut.Distress
	channel roomTemperature: InOut.core_int
	channel DressingStarted: InOut
	channel DressingComplete: InOut
	channel DressingAbandoned: InOut
	channel retryAgreed: InOut
	channel CurtainOpenRqt: InOut
	channel CurtainsOpened: InOut
	channel refuseRequest: InOut
	channel assentToSupportCalls1: InOut.core_boolean
	channel assentToSupportCalls2: InOut.core_boolean
	channel supportCalled1: InOut
	channel supportCalled2: InOut
	
	channel CallSupportCall
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		UserFallen,
		userUnderDressed,
		userDistressed,
		roomTemperature,
		DressingStarted,
		DressingComplete,
		DressingAbandoned,
		retryAgreed,
		CurtainOpenRqt,
		CurtainsOpened,
		refuseRequest,
		assentToSupportCalls1,
		assentToSupportCalls2,
		supportCalled1,
		supportCalled2
	,	CallSupportCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel UserFallen: InOut
			channel userUnderDressed: InOut.core_boolean
			channel userDistressed: InOut.Distress
			channel roomTemperature: InOut.core_int
			channel DressingStarted: InOut
			channel DressingComplete: InOut
			channel DressingAbandoned: InOut
			channel retryAgreed: InOut
			channel CurtainOpenRqt: InOut
			channel CurtainsOpened: InOut
			channel refuseRequest: InOut
			channel assentToSupportCalls1: InOut.core_boolean
			channel assentToSupportCalls2: InOut.core_boolean
			channel supportCalled1: InOut
			channel supportCalled2: InOut
			
			
			
			-- declaring call and ret events for undefined operations
			channel CallSupportCall
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	UserFallen,
				userUnderDressed,
				userDistressed,
				roomTemperature,
				DressingStarted,
				DressingComplete,
				DressingAbandoned,
				retryAgreed,
				CurtainOpenRqt,
				CurtainsOpened,
				refuseRequest,
				assentToSupportCalls1,
				assentToSupportCalls2,
				supportCalled1,
				supportCalled2
			,	CallSupportCall
			|}
	
			-- defined operations
			-- compileOperationDef
			module OP_CallSupportDecision
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_CallSupport|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel assentToSupportCalls__: NIDS.InOut.core_boolean
				channel assentToSupportCalls: InOut.core_boolean
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				channel CallSupportCall
				
				enterSS = {|
				i0::enter,
				f0::enter,
				CallSupport::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				CallSupport::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	assentToSupportCalls,
					SupportCalled
				,	CallSupportCall
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: CallSupport
				module CallSupport
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__CallSupport(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__CallSupport(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				CALL__CallSupport(id__) 	= CallSupportCall -> SKIP
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_assent?assent -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP))) ; j0::enter -> SKIP))))
						 	 [] dbisim((true)&(SupportCalled__!NID_CallSupport.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 	 [] dbisim((assent)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; CallSupport::enter -> SKIP))))
						 	 [] dbisim(((not (assent)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							CallSupport::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   [| { share__, terminate } |] (
								   CallSupport::D__(id__)
								   [| { share__, terminate } |] (
								   j0::D__(id__)
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_assent <- setL_assent]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_assent
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
								 )
								)[[setL_assent <- set_assent]]
								)
							)
							 \ hideSet)
							[[
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							CallSupport::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   CallSupport::VS_O__(id__)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_assent <- setL_assent]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_assent
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
								 )
								)[[setL_assent <- set_assent]]
								)
							)
							 \ hideSet)
							[[
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_assent(assent) =
					get_assent!assent -> Memory_assent(assent)
					[]
					set_assent?x__ -> Memory_assent(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_assent(true)
				
				getsetLocalChannels = {|get_assent,set_assent|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_OpenCurtains
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel CurtainsOpened__: NIDS.InOut
				channel CurtainsOpened: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	CurtainsOpened
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(CurtainsOpened.out -> SKIP)) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								CurtainsOpened__.x____ <- CurtainsOpened
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								CurtainsOpened__.x____ <- CurtainsOpened
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_Dress
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_j0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
				
				-- Shared variable channels
				channel set_EXT_completed: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_completed
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_completed, set_completed
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_temp) \ {terminate}
				
				STM_VS_O(id__,
							param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_temp) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_temp) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
						 	 [] dbisim(((param_temp<17))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
						 	 [] dbisim((((param_temp>=17) and (param_temp<19)))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
						 	 [] dbisim(((param_temp>=19))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_temp) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j0::D__(id__,
								   			param_temp)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_temp))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_temp) = 
					dbisim((MachineBody(id__,
								param_temp)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_temp) = 
					((
						(Behaviour(id__,
									param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_temp))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_temp) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							j0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__,
								   			param_temp)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_temp))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_temp) = 
					dbisim((MachineBody_VS_O(id__,
								param_temp))
					)
				
				
				Stateful_VS_O(id__,
							param_temp) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_temp))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_temp) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_temp) = STM_VS_O(id__,
							param_temp)
				
				D__(id__,
							param_temp) = STM(id__,
							param_temp) \ internal_events
				O__(id__,
							param_temp) = sbisim(diamond(D__(id__,
							param_temp)))
				VS__(id__,
							param_temp) = FVS__(id__,
							param_temp)
				VS_O__(id__,
							param_temp) = sbisim(diamond(FVS__(id__,
							param_temp)))
				HEXT__(id__,
							param_temp) = O__(id__,
							param_temp) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_temp) = O__(id__,
							param_temp) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_Retry
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
				
				-- Shared variable channels
				channel set_EXT_retry: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_retry
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_retry, set_retry
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_retry!true -> SKIP))) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_Clear
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
				channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
				
				-- Shared variable channels
				channel set_EXT_retry: core_boolean
				channel set_EXT_completed: core_boolean
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
					set_EXT_retry,
					set_EXT_completed
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	set_EXT_retry, set_retry,
					set_EXT_completed, set_completed
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__) \ {terminate}
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_completed!false -> SKIP)));share__choice(true & (share__choice(set_retry!false -> SKIP))) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   f0::D__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Idle|
				              NID_Dressing|
				              NID_Abandoned
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_temp, set_temp, setL_temp, setR_temp: core_int
				channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
				channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
				channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				channel get_CallSupportDecision_assent, set_CallSupportDecision_assent: core_boolean
				
				-- Declaring state machine events
				channel DressingStarted__: NIDS.InOut
				channel DressingStarted: InOut
				channel DressingComplete__: NIDS.InOut
				channel DressingComplete: InOut
				channel DressingAbandoned__: NIDS.InOut
				channel DressingAbandoned: InOut
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel roomTemperature__: NIDS.InOut.core_int
				channel roomTemperature: InOut.core_int
				channel assentToSupportCalls__: NIDS.InOut.core_boolean
				channel assentToSupportCalls: InOut.core_boolean
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				Idle::enter,
				Dressing::enter,
				Abandoned::enter
				|}
				
				enteredSS = 	{|
				Idle::entered,
				Dressing::entered,
				Abandoned::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	DressingStarted,
					DressingComplete,
					DressingAbandoned,
					retryAgreed,
					roomTemperature,
					assentToSupportCalls,
					SupportCalled
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Idle
				module Idle
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Dressing
				module Dressing
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
								 	  			id__
								 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
									id__,
									temp
								)) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
								 	  			id__
								 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
									id__,
									temp
								)) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Abandoned
				module Abandoned
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
								 	  			id__
								 	  		) ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((true&CALL__Retry(
									id__
								) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
								 	  			id__
								 	  		) ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((true&CALL__Retry(
									id__
								) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__Clear(id__) = (OP_Clear::O__(id__))
				[[
					OP_Clear::get_retry <- get_retry,
					OP_Clear::set_retry <- set_retry,
					OP_Clear::get_completed <- get_completed,
					OP_Clear::set_completed <- set_completed
				]]
				CALL__CallSupportDecision(id__) = (OP_CallSupportDecision::O__(id__))
				[[
					OP_CallSupportDecision::assentToSupportCalls <- assentToSupportCalls,
					OP_CallSupportDecision::SupportCalled <- SupportCalled
				]]
				[[
					OP_CallSupportDecision::CallSupportCall <- CallSupportCall
				]]
				CALL__Retry(id__) = (OP_Retry::O__(id__))
				[[
					OP_Retry::get_retry <- get_retry,
					OP_Retry::set_retry <- set_retry
				]]
				CALL__Dress(id__,
							param_temp) = (OP_Dress::O__(id__,
							param_temp))
				[[
					OP_Dress::get_completed <- get_completed,
					OP_Dress::set_completed <- set_completed
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_retry?retry -> get_completed?completed -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
						 	 [] dbisim((true)&(DressingStarted__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Dressing::enter -> SKIP)))
						 	 [] dbisim((true)&(DressingAbandoned__!NID_Dressing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Abandoned::enter -> SKIP)))
						 	 [] dbisim((completed)&(internal__!NID_Dressing -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
						 	 [] dbisim((retry)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(retryAgreed.out -> SKIP)) ; Dressing::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
						 			id__
						 		) ; Idle::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter,
							Dressing::enter,
							Abandoned::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   Idle::D__(id__)
								   [| { share__, terminate } |] (
								   Dressing::D__(id__)
								   [| { share__, terminate } |] (
								   Abandoned::D__(id__)
								   )
								   )
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
								 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
								 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_retry <- setL_retry,set_completed <- setL_completed]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_retry
								 			,setL_completed
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
								 )
								)[[setL_retry <- set_retry,setL_completed <- set_completed]]
								)
							)
							 \ hideSet)
							[[
								DressingStarted__.x____ <- DressingStarted,
								DressingComplete__.x____ <- DressingComplete,
								DressingAbandoned__.x____ <- DressingAbandoned,
								retryAgreed__.x____ <- retryAgreed,
								roomTemperature__.x____ <- roomTemperature,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour(id__)
													[| {|get_assent,set_assent,terminate|} |]
													Memory_assent(true)
												)\{|get_assent,set_assent|}
											)
											[| {|get_completed,set_completed,terminate|} |]
											Memory_completed(true)
										)\{|get_completed,set_completed|}
									)
									[| {|get_retry,set_retry,terminate|} |]
									Memory_retry(true)
								)\{|get_retry,set_retry|}
							)
							[| {|get_temp,set_temp,terminate|} |]
							Memory_temp(0)
						)\{|get_temp,set_temp|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter,
							Dressing::enter,
							Abandoned::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Idle::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Dressing::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Abandoned::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
								 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
								 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_retry <- setL_retry,set_completed <- setL_completed]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_retry
								 			,setL_completed
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
								 )
								)[[setL_retry <- set_retry,setL_completed <- set_completed]]
								)
							)
							 \ hideSet)
							[[
								DressingStarted__.x____ <- DressingStarted,
								DressingComplete__.x____ <- DressingComplete,
								DressingAbandoned__.x____ <- DressingAbandoned,
								retryAgreed__.x____ <- retryAgreed,
								roomTemperature__.x____ <- roomTemperature,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour_VS_O(id__)
													[| {|get_assent,set_assent,terminate|} |]
													Memory_assent(true)
												)\{|get_assent,set_assent|}
											)
											[| {|get_completed,set_completed,terminate|} |]
											Memory_completed(true)
										)\{|get_completed,set_completed|}
									)
									[| {|get_retry,set_retry,terminate|} |]
									Memory_retry(true)
								)\{|get_retry,set_retry|}
							)
							[| {|get_temp,set_temp,terminate|} |]
							Memory_temp(0)
						)\{|get_temp,set_temp|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_temp(temp) =
					get_temp!temp -> Memory_temp(temp)
					[]
					set_temp?x__ -> Memory_temp(x__)
					[]
					terminate -> SKIP
				Memory_retry(retry) =
					get_retry!retry -> Memory_retry(retry)
					[]
					set_retry?x__ -> Memory_retry(x__)
					[]
					terminate -> SKIP
				Memory_completed(completed) =
					get_completed!completed -> Memory_completed(completed)
					[]
					set_completed?x__ -> Memory_completed(x__)
					[]
					terminate -> SKIP
				Memory_assent(assent) =
					get_assent!assent -> Memory_assent(assent)
					[]
					set_assent?x__ -> Memory_assent(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_temp(0)
				[| { terminate } |] (
				Memory_retry(true)
				[| { terminate } |] (
				Memory_completed(true)
				[| { terminate } |] (
				Memory_assent(true)
				)
				)
				)
				
				getsetLocalChannels = {|get_temp,set_temp,get_retry,set_retry,get_completed,set_completed,get_assent,set_assent|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			module stm_ref1
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Idle|
				              NID_j0|
				              NID_OpenCurtains
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_underDressed, set_underDressed, setL_underDressed, setR_underDressed: core_boolean
				channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
				channel get_distress, set_distress, setL_distress, setR_distress: Distress
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				channel get_CallSupportDecision_assent, set_CallSupportDecision_assent: core_boolean
				
				-- Declaring state machine events
				channel CurtainOpenRqt__: NIDS.InOut
				channel CurtainOpenRqt: InOut
				channel CurtainsOpened__: NIDS.InOut
				channel CurtainsOpened: InOut
				channel refuseRequest__: NIDS.InOut
				channel refuseRequest: InOut
				channel userUnderDressed__: NIDS.InOut.core_boolean
				channel userUnderDressed: InOut.core_boolean
				channel userDistressed__: NIDS.InOut.Distress
				channel userDistressed: InOut.Distress
				channel UserFallen__: NIDS.InOut
				channel UserFallen: InOut
				channel assentToSupportCalls__: NIDS.InOut.core_boolean
				channel assentToSupportCalls: InOut.core_boolean
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				Idle::enter,
				j0::enter,
				OpenCurtains::enter
				|}
				
				enteredSS = 	{|
				Idle::entered,
				OpenCurtains::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	CurtainOpenRqt,
					CurtainsOpened,
					refuseRequest,
					userUnderDressed,
					userDistressed,
					UserFallen,
					assentToSupportCalls,
					SupportCalled
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Idle
				module Idle
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: OpenCurtains
				module OpenCurtains
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__OpenCurtains(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= true&CALL__OpenCurtains(
									id__
								) ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__OpenCurtains(id__) = (OP_OpenCurtains::O__(id__))
				[[
					OP_OpenCurtains::CurtainsOpened <- CurtainsOpened
				]]
				CALL__CallSupportDecision(id__) = (OP_CallSupportDecision::O__(id__))
				[[
					OP_CallSupportDecision::assentToSupportCalls <- assentToSupportCalls,
					OP_CallSupportDecision::SupportCalled <- SupportCalled
				]]
				[[
					OP_CallSupportDecision::CallSupportCall <- CallSupportCall
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = share__choice(get_distress?distress -> get_underDressed?underDressed -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
						 	 [] dbisim((true)&(CurtainOpenRqt__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(userUnderDressed.in?underDressed -> (SStop /\ set_underDressed!underDressed -> SKIP)));true&(share__choice(userDistressed.in?distress -> (SStop /\ set_distress!distress -> SKIP))) ; j0::enter -> SKIP)))
						 	 [] dbisim(((underDressed and (distress!=Distress_high)))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(refuseRequest.out -> SKIP)) ; Idle::enter -> SKIP))))
						 	 [] dbisim(((not (((underDressed and (distress!=Distress_high))))))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; OpenCurtains::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_OpenCurtains -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
						 	 [] dbisim((true)&(UserFallen__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
						 			id__
						 		) ; OpenCurtains::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter,
							j0::enter,
							OpenCurtains::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   Idle::D__(id__)
								   [| { share__, terminate } |] (
								   j0::D__(id__)
								   [| { share__, terminate } |] (
								   OpenCurtains::D__(id__)
								   )
								   )
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
								 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_distress
								 			,setL_underDressed
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
								 )
								)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
								)
							)
							 \ hideSet)
							[[
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								refuseRequest__.x____ <- refuseRequest,
								userUnderDressed__.x____ <- userUnderDressed,
								userDistressed__.x____ <- userDistressed,
								UserFallen__.x____ <- UserFallen,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											Behaviour(id__)
											[| {|get_distress,set_distress,terminate|} |]
											Memory_distress(Distress_low)
										)\{|get_distress,set_distress|}
									)
									[| {|get_assent,set_assent,terminate|} |]
									Memory_assent(true)
								)\{|get_assent,set_assent|}
							)
							[| {|get_underDressed,set_underDressed,terminate|} |]
							Memory_underDressed(true)
						)\{|get_underDressed,set_underDressed|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter,
							j0::enter,
							OpenCurtains::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Idle::VS_O__(id__)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   OpenCurtains::VS_O__(id__)
								   )
								   )
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
								 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_distress
								 			,setL_underDressed
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
								 )
								)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
								)
							)
							 \ hideSet)
							[[
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								refuseRequest__.x____ <- refuseRequest,
								userUnderDressed__.x____ <- userUnderDressed,
								userDistressed__.x____ <- userDistressed,
								UserFallen__.x____ <- UserFallen,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											Behaviour_VS_O(id__)
											[| {|get_distress,set_distress,terminate|} |]
											Memory_distress(Distress_low)
										)\{|get_distress,set_distress|}
									)
									[| {|get_assent,set_assent,terminate|} |]
									Memory_assent(true)
								)\{|get_assent,set_assent|}
							)
							[| {|get_underDressed,set_underDressed,terminate|} |]
							Memory_underDressed(true)
						)\{|get_underDressed,set_underDressed|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_underDressed(underDressed) =
					get_underDressed!underDressed -> Memory_underDressed(underDressed)
					[]
					set_underDressed?x__ -> Memory_underDressed(x__)
					[]
					terminate -> SKIP
				Memory_assent(assent) =
					get_assent!assent -> Memory_assent(assent)
					[]
					set_assent?x__ -> Memory_assent(x__)
					[]
					terminate -> SKIP
				Memory_distress(distress) =
					get_distress!distress -> Memory_distress(distress)
					[]
					set_distress?x__ -> Memory_distress(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_underDressed(true)
				[| { terminate } |] (
				Memory_assent(true)
				[| { terminate } |] (
				Memory_distress(Distress_low)
				)
				)
				
				getsetLocalChannels = {|get_underDressed,set_underDressed,get_assent,set_assent,get_distress,set_distress|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				CALL__CallSupport(id__) 	= CallSupportCall -> SKIP
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						(
							stm_ref0::D__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::retryAgreed <- retryAgreed,
								stm_ref0::DressingComplete <- DressingComplete,
								stm_ref0::DressingStarted <- DressingStarted,
								stm_ref0::roomTemperature <- roomTemperature,
								stm_ref0::DressingAbandoned <- DressingAbandoned,
								stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
								stm_ref0::SupportCalled <- supportCalled1
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::D__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::userUnderDressed <- userUnderDressed,
								stm_ref1::CurtainsOpened <- CurtainsOpened,
								stm_ref1::refuseRequest <- refuseRequest,
								stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
								stm_ref1::userDistressed <- userDistressed,
								stm_ref1::UserFallen <- UserFallen,
								stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
								stm_ref1::SupportCalled <- supportCalled2
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						(
							stm_ref0::VS__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::retryAgreed <- retryAgreed,
								stm_ref0::DressingComplete <- DressingComplete,
								stm_ref0::DressingStarted <- DressingStarted,
								stm_ref0::roomTemperature <- roomTemperature,
								stm_ref0::DressingAbandoned <- DressingAbandoned,
								stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
								stm_ref0::SupportCalled <- supportCalled1
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::VS__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::userUnderDressed <- userUnderDressed,
								stm_ref1::CurtainsOpened <- CurtainsOpened,
								stm_ref1::refuseRequest <- refuseRequest,
								stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
								stm_ref1::userDistressed <- userDistressed,
								stm_ref1::UserFallen <- UserFallen,
								stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
								stm_ref1::SupportCalled <- supportCalled2
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						(
							stm_ref0::O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::retryAgreed <- retryAgreed,
								stm_ref0::DressingComplete <- DressingComplete,
								stm_ref0::DressingStarted <- DressingStarted,
								stm_ref0::roomTemperature <- roomTemperature,
								stm_ref0::DressingAbandoned <- DressingAbandoned,
								stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
								stm_ref0::SupportCalled <- supportCalled1
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::userUnderDressed <- userUnderDressed,
								stm_ref1::CurtainsOpened <- CurtainsOpened,
								stm_ref1::refuseRequest <- refuseRequest,
								stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
								stm_ref1::userDistressed <- userDistressed,
								stm_ref1::UserFallen <- UserFallen,
								stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
								stm_ref1::SupportCalled <- supportCalled2
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						(
							stm_ref0::VS_O__(id__)[[
								stm_ref0::terminate <- terminate,
								stm_ref0::retryAgreed <- retryAgreed,
								stm_ref0::DressingComplete <- DressingComplete,
								stm_ref0::DressingStarted <- DressingStarted,
								stm_ref0::roomTemperature <- roomTemperature,
								stm_ref0::DressingAbandoned <- DressingAbandoned,
								stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
								stm_ref0::SupportCalled <- supportCalled1
							]]
						)
							[|{|terminate|}|]
						(
							stm_ref1::VS_O__(id__)[[
								stm_ref1::terminate <- terminate,
								stm_ref1::userUnderDressed <- userUnderDressed,
								stm_ref1::CurtainsOpened <- CurtainsOpened,
								stm_ref1::refuseRequest <- refuseRequest,
								stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
								stm_ref1::userDistressed <- userDistressed,
								stm_ref1::UserFallen <- UserFallen,
								stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
								stm_ref1::SupportCalled <- supportCalled2
							]]
						)
					)
					\diff(
						{|terminate|},
						{|terminate|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::D__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls1 <- assentToSupportCalls1,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::assentToSupportCalls2 <- assentToSupportCalls2,
							ctrl_ref0::supportCalled1 <- supportCalled1,
							ctrl_ref0::supportCalled2 <- supportCalled2,
							ctrl_ref0::CallSupportCall <- CallSupportCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls1 <- assentToSupportCalls1,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::assentToSupportCalls2 <- assentToSupportCalls2,
							ctrl_ref0::supportCalled1 <- supportCalled1,
							ctrl_ref0::supportCalled2 <- supportCalled2,
							ctrl_ref0::CallSupportCall <- CallSupportCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls1 <- assentToSupportCalls1,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::assentToSupportCalls2 <- assentToSupportCalls2,
							ctrl_ref0::supportCalled1 <- supportCalled1,
							ctrl_ref0::supportCalled2 <- supportCalled2,
							ctrl_ref0::CallSupportCall <- CallSupportCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS_O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls1 <- assentToSupportCalls1,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::assentToSupportCalls2 <- assentToSupportCalls2,
							ctrl_ref0::supportCalled1 <- supportCalled1,
							ctrl_ref0::supportCalled2 <- supportCalled2,
							ctrl_ref0::CallSupportCall <- CallSupportCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls1 <- assentToSupportCalls1,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::assentToSupportCalls2 <- assentToSupportCalls2,
							ctrl_ref0::supportCalled1 <- supportCalled1,
							ctrl_ref0::supportCalled2 <- supportCalled2,
							ctrl_ref0::CallSupportCall <- CallSupportCall
						]]
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule

	module ctrl0
		shared_variable_events = {|
		|}
		
	exports
		transparent diamond
		transparent sbisim
		transparent dbisim
		transparent chase

		-- declaring controller events
		channel UserFallen: InOut
		channel userUnderDressed: InOut.core_boolean
		channel userDistressed: InOut.Distress
		channel roomTemperature: InOut.core_int
		channel DressingStarted: InOut
		channel DressingComplete: InOut
		channel DressingAbandoned: InOut
		channel retryAgreed: InOut
		channel CurtainOpenRqt: InOut
		channel CurtainsOpened: InOut
		channel refuseRequest: InOut
		channel assentToSupportCalls1: InOut.core_boolean
		channel assentToSupportCalls2: InOut.core_boolean
		channel supportCalled1: InOut
		channel supportCalled2: InOut
		
		
		
		-- declaring call and ret events for undefined operations
		channel CallSupportCall
		
		-- declaring controller termination channel
		channel terminate
		
		-- channel set with all visible events
		sem__events = {|
			terminate
		,	UserFallen,
			userUnderDressed,
			userDistressed,
			roomTemperature,
			DressingStarted,
			DressingComplete,
			DressingAbandoned,
			retryAgreed,
			CurtainOpenRqt,
			CurtainsOpened,
			refuseRequest,
			assentToSupportCalls1,
			assentToSupportCalls2,
			supportCalled1,
			supportCalled2
		,	CallSupportCall
		|}

		-- defined operations
		-- compileOperationDef
		module OP_CallSupportDecision
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_CallSupport|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel assentToSupportCalls__: NIDS.InOut.core_boolean
			channel assentToSupportCalls: InOut.core_boolean
			channel SupportCalled__: NIDS.InOut
			channel SupportCalled: InOut
			
			-- Declaring call and ret events for undefined operations
			channel CallSupportCall
			
			enterSS = {|
			i0::enter,
			f0::enter,
			CallSupport::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered,
			CallSupport::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	assentToSupportCalls,
				SupportCalled
			,	CallSupportCall
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: CallSupport
			module CallSupport
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__CallSupport(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__CallSupport(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Junction: j0
			module j0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			CALL__CallSupport(id__) 	= CallSupportCall -> SKIP
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_assent?assent -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP))) ; j0::enter -> SKIP))))
					 	 [] dbisim((true)&(SupportCalled__!NID_CallSupport.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
					 	 [] dbisim((assent)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; CallSupport::enter -> SKIP))))
					 	 [] dbisim(((not (assent)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter,
						CallSupport::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   [| { share__, terminate } |] (
							   CallSupport::D__(id__)
							   [| { share__, terminate } |] (
							   j0::D__(id__)
							   )
							   )
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_assent <- setL_assent]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_assent
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
							 )
							)[[setL_assent <- set_assent]]
							)
						)
						 \ hideSet)
						[[
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter,
						CallSupport::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   CallSupport::VS_O__(id__)
							   [| { share__, terminate } |] (
							   j0::VS_O__(id__)
							   )
							   )
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_assent <- setL_assent]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_assent
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
							 )
							)[[setL_assent <- set_assent]]
							)
						)
						 \ hideSet)
						[[
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_assent(assent) =
				get_assent!assent -> Memory_assent(assent)
				[]
				set_assent?x__ -> Memory_assent(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_assent(true)
			
			getsetLocalChannels = {|get_assent,set_assent|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_OpenCurtains
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			channel CurtainsOpened__: NIDS.InOut
			channel CurtainsOpened: InOut
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	CurtainsOpened
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(CurtainsOpened.out -> SKIP)) ; f0::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							CurtainsOpened__.x____ <- CurtainsOpened
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
						[[
							CurtainsOpened__.x____ <- CurtainsOpened
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_Dress
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0|
			              NID_j0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
			
			-- Shared variable channels
			channel set_EXT_completed: core_boolean
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter,
			j0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_completed
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_completed, set_completed
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__,
							param_temp) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__,
							param_temp) = D__(id__,
							param_temp)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__,
							param_temp) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_temp) = D__(id__,
							param_temp)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Junction: j0
			module j0
			exports
			
				channel enter, interrupt
				
				D__(id__,
							param_temp) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__,
							param_temp) = D__(id__,
							param_temp)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__,
						param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_temp) \ {terminate}
			
			STM_VS_O(id__,
						param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__,
						param_temp) \ {terminate}
			
			-- Transitions
			Transitions(id__,
						param_temp) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
					 	 [] dbisim(((param_temp<17))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
					 	 [] dbisim((((param_temp>=17) and (param_temp<19)))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
					 	 [] dbisim(((param_temp>=19))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__,
						param_temp) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__,
							   			param_temp)
							   [| { share__, terminate } |] (
							   f0::D__(id__,
							   			param_temp)
							   [| { share__, terminate } |] (
							   j0::D__(id__,
							   			param_temp)
							   )
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_temp))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__,
						param_temp) = 
				dbisim((MachineBody(id__,
							param_temp)\ enteredSS)
				)
			
			
			Stateful(id__,
						param_temp) = 
				((
					(Behaviour(id__,
								param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_temp))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__,
						param_temp) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter,
						j0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__,
							   			param_temp)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__,
							   			param_temp)
							   [| { share__, terminate } |] (
							   j0::VS_O__(id__,
							   			param_temp)
							   )
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__,
							 			param_temp))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__,
						param_temp) = 
				dbisim((MachineBody_VS_O(id__,
							param_temp))
				)
			
			
			Stateful_VS_O(id__,
						param_temp) = 
				dbisim((
					(Behaviour_VS_O(id__,
								param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
								param_temp))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__,
						param_temp) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__,
						param_temp) = STM_VS_O(id__,
						param_temp)
			
			D__(id__,
						param_temp) = STM(id__,
						param_temp) \ internal_events
			O__(id__,
						param_temp) = sbisim(diamond(D__(id__,
						param_temp)))
			VS__(id__,
						param_temp) = FVS__(id__,
						param_temp)
			VS_O__(id__,
						param_temp) = sbisim(diamond(FVS__(id__,
						param_temp)))
			HEXT__(id__,
						param_temp) = O__(id__,
						param_temp) [|shared_variable_events|] SKIP
			HUP__(id__,
						param_temp) = O__(id__,
						param_temp) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_Retry
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
			
			-- Shared variable channels
			channel set_EXT_retry: core_boolean
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_retry
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_retry, set_retry
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_retry!true -> SKIP))) ; f0::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
		-- compileOperationDef
		module OP_Clear
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
			
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_f0
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
			channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
			
			-- Shared variable channels
			channel set_EXT_retry: core_boolean
			channel set_EXT_completed: core_boolean
			
			-- Local variable channels for defined operations that are required by the state machine
			
			-- Declaring state machine events
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			f0::enter
			|}
			
			enteredSS = 	{|
			f0::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
				set_EXT_retry,
				set_EXT_completed
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	set_EXT_retry, set_retry,
				set_EXT_completed, set_completed
				, share__
				|}
			
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Final state: f0
			module f0
			
			exports
			
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
				--	Rule: behaviours(Node)
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
						
						Entering 	= entered -> SKIP ; Active
						Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
						Interrupted	= share__choice(exit -> exited -> Inactive)
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
			Stateful(id__) \ {terminate}
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_completed!false -> SKIP)));share__choice(true & (share__choice(set_retry!false -> SKIP))) ; f0::enter -> SKIP))))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   f0::D__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {|f0::entered|}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						f0::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   f0::VS_O__(id__)
							   )
							 )
							 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__ |} ]]
							 )
							)
							)
						)
						 \ hideSet)
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			
			-- END
			
			-- Memory
			-- Memory variables
			
			-- varMemory process
			varMemory(id__) = terminate -> SKIP
			
			getsetLocalChannels = {||}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
					endmodule
	
		-- declaring machines
		module stm_ref0
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_Idle|
			              NID_Dressing|
			              NID_Abandoned
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_temp, set_temp, setL_temp, setR_temp: core_int
			channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
			channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
			channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			channel get_CallSupportDecision_assent, set_CallSupportDecision_assent: core_boolean
			
			-- Declaring state machine events
			channel DressingStarted__: NIDS.InOut
			channel DressingStarted: InOut
			channel DressingComplete__: NIDS.InOut
			channel DressingComplete: InOut
			channel DressingAbandoned__: NIDS.InOut
			channel DressingAbandoned: InOut
			channel retryAgreed__: NIDS.InOut
			channel retryAgreed: InOut
			channel roomTemperature__: NIDS.InOut.core_int
			channel roomTemperature: InOut.core_int
			channel assentToSupportCalls__: NIDS.InOut.core_boolean
			channel assentToSupportCalls: InOut.core_boolean
			channel SupportCalled__: NIDS.InOut
			channel SupportCalled: InOut
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			Idle::enter,
			Dressing::enter,
			Abandoned::enter
			|}
			
			enteredSS = 	{|
			Idle::entered,
			Dressing::entered,
			Abandoned::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	DressingStarted,
				DressingComplete,
				DressingAbandoned,
				retryAgreed,
				roomTemperature,
				assentToSupportCalls,
				SupportCalled
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Idle
			module Idle
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Dressing
			module Dressing
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
							 	  			id__
							 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
								id__,
								temp
							)) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
							 	  			id__
							 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
								id__,
								temp
							)) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Abandoned
			module Abandoned
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
							 	  			id__
							 	  		) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__Retry(
								id__
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
							 	  			id__
							 	  		) ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((true&CALL__Retry(
								id__
							) ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			CALL__Clear(id__) = (OP_Clear::O__(id__))
			[[
				OP_Clear::get_retry <- get_retry,
				OP_Clear::set_retry <- set_retry,
				OP_Clear::get_completed <- get_completed,
				OP_Clear::set_completed <- set_completed
			]]
			CALL__CallSupportDecision(id__) = (OP_CallSupportDecision::O__(id__))
			[[
				OP_CallSupportDecision::assentToSupportCalls <- assentToSupportCalls,
				OP_CallSupportDecision::SupportCalled <- SupportCalled
			]]
			[[
				OP_CallSupportDecision::CallSupportCall <- CallSupportCall
			]]
			CALL__Retry(id__) = (OP_Retry::O__(id__))
			[[
				OP_Retry::get_retry <- get_retry,
				OP_Retry::set_retry <- set_retry
			]]
			CALL__Dress(id__,
						param_temp) = (OP_Dress::O__(id__,
						param_temp))
			[[
				OP_Dress::get_completed <- get_completed,
				OP_Dress::set_completed <- set_completed
			]]
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_retry?retry -> get_completed?completed -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
					 	 [] dbisim((true)&(DressingStarted__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Dressing::enter -> SKIP)))
					 	 [] dbisim((true)&(DressingAbandoned__!NID_Dressing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Abandoned::enter -> SKIP)))
					 	 [] dbisim((completed)&(internal__!NID_Dressing -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
					 	 [] dbisim((retry)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(retryAgreed.out -> SKIP)) ; Dressing::enter -> SKIP)))
					 	 [] dbisim((true)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
					 			id__
					 		) ; Idle::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Idle::enter,
						Dressing::enter,
						Abandoned::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   Idle::D__(id__)
							   [| { share__, terminate } |] (
							   Dressing::D__(id__)
							   [| { share__, terminate } |] (
							   Abandoned::D__(id__)
							   )
							   )
							   )
							 )
							 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
							 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
							 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_retry <- setL_retry,set_completed <- setL_completed]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_retry
							 			,setL_completed
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
							 )
							)[[setL_retry <- set_retry,setL_completed <- set_completed]]
							)
						)
						 \ hideSet)
						[[
							DressingStarted__.x____ <- DressingStarted,
							DressingComplete__.x____ <- DressingComplete,
							DressingAbandoned__.x____ <- DressingAbandoned,
							retryAgreed__.x____ <- retryAgreed,
							roomTemperature__.x____ <- roomTemperature,
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour(id__)
												[| {|get_assent,set_assent,terminate|} |]
												Memory_assent(true)
											)\{|get_assent,set_assent|}
										)
										[| {|get_completed,set_completed,terminate|} |]
										Memory_completed(true)
									)\{|get_completed,set_completed|}
								)
								[| {|get_retry,set_retry,terminate|} |]
								Memory_retry(true)
							)\{|get_retry,set_retry|}
						)
						[| {|get_temp,set_temp,terminate|} |]
						Memory_temp(0)
					)\{|get_temp,set_temp|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Idle::enter,
						Dressing::enter,
						Abandoned::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Idle::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Dressing::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Abandoned::VS_O__(id__)
							   )
							   )
							   )
							 )
							 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
							 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
							 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_retry <- setL_retry,set_completed <- setL_completed]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_retry
							 			,setL_completed
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
							 )
							)[[setL_retry <- set_retry,setL_completed <- set_completed]]
							)
						)
						 \ hideSet)
						[[
							DressingStarted__.x____ <- DressingStarted,
							DressingComplete__.x____ <- DressingComplete,
							DressingAbandoned__.x____ <- DressingAbandoned,
							retryAgreed__.x____ <- retryAgreed,
							roomTemperature__.x____ <- roomTemperature,
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										dbisim(
											sbisim(
												Behaviour_VS_O(id__)
												[| {|get_assent,set_assent,terminate|} |]
												Memory_assent(true)
											)\{|get_assent,set_assent|}
										)
										[| {|get_completed,set_completed,terminate|} |]
										Memory_completed(true)
									)\{|get_completed,set_completed|}
								)
								[| {|get_retry,set_retry,terminate|} |]
								Memory_retry(true)
							)\{|get_retry,set_retry|}
						)
						[| {|get_temp,set_temp,terminate|} |]
						Memory_temp(0)
					)\{|get_temp,set_temp|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_temp(temp) =
				get_temp!temp -> Memory_temp(temp)
				[]
				set_temp?x__ -> Memory_temp(x__)
				[]
				terminate -> SKIP
			Memory_retry(retry) =
				get_retry!retry -> Memory_retry(retry)
				[]
				set_retry?x__ -> Memory_retry(x__)
				[]
				terminate -> SKIP
			Memory_completed(completed) =
				get_completed!completed -> Memory_completed(completed)
				[]
				set_completed?x__ -> Memory_completed(x__)
				[]
				terminate -> SKIP
			Memory_assent(assent) =
				get_assent!assent -> Memory_assent(assent)
				[]
				set_assent?x__ -> Memory_assent(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_temp(0)
			[| { terminate } |] (
			Memory_retry(true)
			[| { terminate } |] (
			Memory_completed(true)
			[| { terminate } |] (
			Memory_assent(true)
			)
			)
			)
			
			getsetLocalChannels = {|get_temp,set_temp,get_retry,set_retry,get_completed,set_completed,get_assent,set_assent|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		module stm_ref1
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
		
			-- Transition identifiers
			-- declaring identifiers of transitions
			datatype NIDS = 
			              NID_i0|
			              NID_Idle|
			              NID_j0|
			              NID_OpenCurtains
			
			channel internal__ : NIDS
			
			-- Flow channels		
			channel interrupt
			channel exited
			channel exit
			channel terminate
			
			-- Variable channels
			channel get_underDressed, set_underDressed, setL_underDressed, setR_underDressed: core_boolean
			channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
			channel get_distress, set_distress, setL_distress, setR_distress: Distress
			
			-- Shared variable channels
			
			-- Local variable channels for defined operations that are required by the state machine
			channel get_CallSupportDecision_assent, set_CallSupportDecision_assent: core_boolean
			
			-- Declaring state machine events
			channel CurtainOpenRqt__: NIDS.InOut
			channel CurtainOpenRqt: InOut
			channel CurtainsOpened__: NIDS.InOut
			channel CurtainsOpened: InOut
			channel refuseRequest__: NIDS.InOut
			channel refuseRequest: InOut
			channel userUnderDressed__: NIDS.InOut.core_boolean
			channel userUnderDressed: InOut.core_boolean
			channel userDistressed__: NIDS.InOut.Distress
			channel userDistressed: InOut.Distress
			channel UserFallen__: NIDS.InOut
			channel UserFallen: InOut
			channel assentToSupportCalls__: NIDS.InOut.core_boolean
			channel assentToSupportCalls: InOut.core_boolean
			channel SupportCalled__: NIDS.InOut
			channel SupportCalled: InOut
			
			-- Declaring call and ret events for undefined operations
			
			enterSS = {|
			i0::enter,
			Idle::enter,
			j0::enter,
			OpenCurtains::enter
			|}
			
			enteredSS = 	{|
			Idle::entered,
			OpenCurtains::entered
			|}
			
			internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
			
			shared_variable_events = {|
			|}
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	CurtainOpenRqt,
				CurtainsOpened,
				refuseRequest,
				userUnderDressed,
				userDistressed,
				UserFallen,
				assentToSupportCalls,
				SupportCalled
				|}
		
			-- Nodes --
			-- declaring all nodes
			
			----------------------------------------------------------------------
			-- Initial: i0
			module i0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
				
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: Idle
			module Idle
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= SKIP ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- Junction: j0
			module j0
			exports
			
				channel enter, interrupt
				
				D__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Active 		= share__choice(interrupt -> SKIP) ; Inactive
					within
						Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = D__(id__)
			
			endmodule
			----------------------------------------------------------------------
			
			
			----------------------------------------------------------------------
			-- State: OpenCurtains
			module OpenCurtains
			
			enterSS = {}
			
			enteredSS = {}
			
			exports
			
				--  Declarations
				
				channel enter, entered, interrupt
				channel enteredL, enteredR
				
								
				
				--	Nodes
				-- declaring all nodes
				
				
				--	Rule: behaviours(Node)
				--  Note that FDR has problems with efficiently compiling the process below
				-- 	if using a different recursion pattern.
				D__(id__) = 
				dbisim(let
					-- IMPLEMENTATION NOTE: 
					-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
					-- however FDR struggles with that form in certain cases. So we use the exception operator
					-- instead to 'terminate'.
					
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__OpenCurtains(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
					
				VS_O__(id__) = 
				dbisim(let
					Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
					
					Termination = terminate -> SKIP
					
					Active 		= true&CALL__OpenCurtains(
								id__
							) ; 
							 	  Behaviour ; 
							 	  share__choice(exit -> SKIP) ; SKIP ; 
							 	  share__choice(exited -> SKIP) ; Inactive
				
					Behaviour 	= entered -> During
					During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
				within
					Inactive [| {terminate} |> SKIP)
				
			
			endmodule
			----------------------------------------------------------------------
			
			-- END of Nodes --
			
			-- Operation calls --
			-- Only the undefined operations are declared here.
			-- If the state machine is in isolation, all required operations will be undefined.
			-- If it is in the context of a controller, the required operations not provided by the
			-- controller will be declared here, and the defined operations will be defined in the
			-- context of the Controller module, and therefore within scope of the state machine module.
			
			CALL__OpenCurtains(id__) = (OP_OpenCurtains::O__(id__))
			[[
				OP_OpenCurtains::CurtainsOpened <- CurtainsOpened
			]]
			CALL__CallSupportDecision(id__) = (OP_CallSupportDecision::O__(id__))
			[[
				OP_CallSupportDecision::assentToSupportCalls <- assentToSupportCalls,
				OP_CallSupportDecision::SupportCalled <- SupportCalled
			]]
			[[
				OP_CallSupportDecision::CallSupportCall <- CallSupportCall
			]]
			-- END of Operation calls --
			
			-- STM processes
			STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
			( 
				(
					(
						(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
					 	[[ share__ <- x__ | x__ <- {||} ]]
					)
				[| {share__} |]
				SKIP
				)
				[| union(sharedVarSync,{terminate}) |]
				dbisim(sharedVarMemory(id__))
			)\sharedVarHide
			
			-- Transitions
			Transitions(id__) = ((let
				Trans = share__choice(get_distress?distress -> get_underDressed?underDressed -> (
					((share__ -> SKIP
					 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
					 	 [] dbisim((true)&(CurtainOpenRqt__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(userUnderDressed.in?underDressed -> (SStop /\ set_underDressed!underDressed -> SKIP)));true&(share__choice(userDistressed.in?distress -> (SStop /\ set_distress!distress -> SKIP))) ; j0::enter -> SKIP)))
					 	 [] dbisim(((underDressed and (distress!=Distress_high)))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(refuseRequest.out -> SKIP)) ; Idle::enter -> SKIP))))
					 	 [] dbisim(((not (((underDressed and (distress!=Distress_high))))))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; OpenCurtains::enter -> SKIP))))
					 	 [] dbisim((true)&(internal__!NID_OpenCurtains -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
					 	 [] dbisim((true)&(UserFallen__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
					 			id__
					 		) ; OpenCurtains::enter -> SKIP)))
					 ) ; Trans)
					 []
					 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
					 []
					 terminate -> SKIP
				)
				)
			within
				Trans
			)
			)
			
			-- Stateful
			-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
			
			-- Named process definitions
			MachineBody(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Idle::enter,
						j0::enter,
						OpenCurtains::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::D__(id__)
							   [| { share__, terminate } |] (
							   Idle::D__(id__)
							   [| { share__, terminate } |] (
							   j0::D__(id__)
							   [| { share__, terminate } |] (
							   OpenCurtains::D__(id__)
							   )
							   )
							   )
							 )
							 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
							 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_distress
							 			,setL_underDressed
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
							 )
							)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
							)
						)
						 \ hideSet)
						[[
							CurtainOpenRqt__.x____ <- CurtainOpenRqt,
							CurtainsOpened__.x____ <- CurtainsOpened,
							refuseRequest__.x____ <- refuseRequest,
							userUnderDressed__.x____ <- userUnderDressed,
							userDistressed__.x____ <- userDistressed,
							UserFallen__.x____ <- UserFallen,
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			IteratedBehaviour(id__) = 
				dbisim((MachineBody(id__)\ enteredSS)
				)
			
			Stateful(id__) = 
				((
					(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__)
										[| {|get_distress,set_distress,terminate|} |]
										Memory_distress(Distress_low)
									)\{|get_distress,set_distress|}
								)
								[| {|get_assent,set_assent,terminate|} |]
								Memory_assent(true)
							)\{|get_assent,set_assent|}
						)
						[| {|get_underDressed,set_underDressed,terminate|} |]
						Memory_underDressed(true)
					)\{|get_underDressed,set_underDressed|}
				)
				)
			
			-- Visible counterparts
			MachineBody_VS_O(id__) = 
				dbisim((
				let
					finalNodesEntered = {||}
				within
					((let
						-- IMPLEMENTATION NOTE:
						-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
						-- modules for defining the semantics of each node.
						enterSS = {|
						i0::enter,
						Idle::enter,
						j0::enter,
						OpenCurtains::enter
						|}
						hideSet = union(enterSS,{|exit,exited,internal__|})
					within 
						((let
							-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
							-- because CSPM modules are used for the semantics of Node.
							flowevts = union(enterSS,{|exit,exited,interrupt|})
							transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
						within
							((
							 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
							   i0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   Idle::VS_O__(id__)
							   [| { share__, terminate } |] (
							   j0::VS_O__(id__)
							   [| { share__, terminate } |] (
							   OpenCurtains::VS_O__(id__)
							   )
							   )
							   )
							 )
							 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
							 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
							 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
							 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
							 )
							  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
							  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
							 )
							 [| union(union(union(flowevts,transSync),{terminate}),{|share__
							 			,setL_distress
							 			,setL_underDressed
							|}) |]
							 ((i0::enter -> Transitions(id__))
							  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
							 )
							)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
							)
						)
						 \ hideSet)
						[[
							CurtainOpenRqt__.x____ <- CurtainOpenRqt,
							CurtainsOpened__.x____ <- CurtainsOpened,
							refuseRequest__.x____ <- refuseRequest,
							userUnderDressed__.x____ <- userUnderDressed,
							userDistressed__.x____ <- userDistressed,
							UserFallen__.x____ <- UserFallen,
							assentToSupportCalls__.x____ <- assentToSupportCalls,
							SupportCalled__.x____ <- SupportCalled
							| x____ <- NIDS
						]]
					)
					 [| {| interrupt |} |] SKIP)
				)
				)
			
			Behaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			IteratedBehaviour_VS_O(id__) = 
				dbisim((MachineBody_VS_O(id__))
				)
			
			Stateful_VS_O(id__) = 
				dbisim((
					(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
				 	\getsetLocalChannels
				)
				)
			
			IteratedStateful_VS_O(id__) =
				(dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__)
										[| {|get_distress,set_distress,terminate|} |]
										Memory_distress(Distress_low)
									)\{|get_distress,set_distress|}
								)
								[| {|get_assent,set_assent,terminate|} |]
								Memory_assent(true)
							)\{|get_assent,set_assent|}
						)
						[| {|get_underDressed,set_underDressed,terminate|} |]
						Memory_underDressed(true)
					)\{|get_underDressed,set_underDressed|}
				)
				)
			
			-- END
			
			-- Memory
			-- Memory variables
			Memory_underDressed(underDressed) =
				get_underDressed!underDressed -> Memory_underDressed(underDressed)
				[]
				set_underDressed?x__ -> Memory_underDressed(x__)
				[]
				terminate -> SKIP
			Memory_assent(assent) =
				get_assent!assent -> Memory_assent(assent)
				[]
				set_assent?x__ -> Memory_assent(x__)
				[]
				terminate -> SKIP
			Memory_distress(distress) =
				get_distress!distress -> Memory_distress(distress)
				[]
				set_distress?x__ -> Memory_distress(x__)
				[]
				terminate -> SKIP
			
			-- varMemory process
			varMemory(id__) = Memory_underDressed(true)
			[| { terminate } |] (
			Memory_assent(true)
			[| { terminate } |] (
			Memory_distress(Distress_low)
			)
			)
			
			getsetLocalChannels = {|get_underDressed,set_underDressed,get_assent,set_assent,get_distress,set_distress|}
			
			-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
			FVS__(id__) = STM_VS_O(id__)
			
			D__(id__) = STM(id__) \ internal_events
			O__(id__) = sbisim(diamond(D__(id__)))
			VS__(id__) = FVS__(id__)
			VS_O__(id__) = sbisim(diamond(FVS__(id__)))
			HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
			HUP__(id__) = O__(id__) [|{share__}|] SKIP
			
			-- Shared memory
			-- Shared memory variables
			
			-- sharedVarMemory process
			sharedVarMemory(id__) = terminate -> SKIP
			
			sharedVarSync = {||}
			
			sharedVarHide = {||}
		endmodule
		
			-- undefined operations
			CALL__CallSupport(id__) 	= CallSupportCall -> SKIP
			
			-- declaring controller memory
			Memory(id__) = SKIP
			
			D__(id__) = 	((
					(
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::retryAgreed <- retryAgreed,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
							stm_ref0::SupportCalled <- supportCalled1
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::D__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::userUnderDressed <- userUnderDressed,
							stm_ref1::CurtainsOpened <- CurtainsOpened,
							stm_ref1::refuseRequest <- refuseRequest,
							stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref1::userDistressed <- userDistressed,
							stm_ref1::UserFallen <- UserFallen,
							stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
							stm_ref1::SupportCalled <- supportCalled2
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			
			-- VS version
			VS__(id__) = 	((
					(
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::retryAgreed <- retryAgreed,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
							stm_ref0::SupportCalled <- supportCalled1
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::VS__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::userUnderDressed <- userUnderDressed,
							stm_ref1::CurtainsOpened <- CurtainsOpened,
							stm_ref1::refuseRequest <- refuseRequest,
							stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref1::userDistressed <- userDistressed,
							stm_ref1::UserFallen <- UserFallen,
							stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
							stm_ref1::SupportCalled <- supportCalled2
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				Memory(id__)
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
		
			-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
			O__(id__) = sbisim(diamond(	((
					(
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::retryAgreed <- retryAgreed,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
							stm_ref0::SupportCalled <- supportCalled1
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::O__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::userUnderDressed <- userUnderDressed,
							stm_ref1::CurtainsOpened <- CurtainsOpened,
							stm_ref1::refuseRequest <- refuseRequest,
							stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref1::userDistressed <- userDistressed,
							stm_ref1::UserFallen <- UserFallen,
							stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
							stm_ref1::SupportCalled <- supportCalled2
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
							
			-- VS_O version
			VS_O__(id__) = sbisim(diamond(	((
					(
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::retryAgreed <- retryAgreed,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls1,
							stm_ref0::SupportCalled <- supportCalled1
						]]
					)
						[|{|terminate|}|]
					(
						stm_ref1::VS_O__(id__)[[
							stm_ref1::terminate <- terminate,
							stm_ref1::userUnderDressed <- userUnderDressed,
							stm_ref1::CurtainsOpened <- CurtainsOpened,
							stm_ref1::refuseRequest <- refuseRequest,
							stm_ref1::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref1::userDistressed <- userDistressed,
							stm_ref1::UserFallen <- UserFallen,
							stm_ref1::assentToSupportCalls <- assentToSupportCalls2,
							stm_ref1::SupportCalled <- supportCalled2
						]]
					)
				)
				\diff(
					{|terminate|},
					{|terminate|}
				)
					[|
						union(
							{|
							|},
							{|
							|}
						)
					|]
				dbisim(Memory(id__))
			)
			\ union(
				{|
				|},
				{|
				|}
			)
			[|{|terminate|}|>SKIP
			))
		
			HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			

	endmodule

module DressingService
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Idle|
	              NID_Dressing|
	              NID_Abandoned
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_temp, set_temp, setL_temp, setR_temp: core_int
	channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
	channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
	channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel DressingStarted__: NIDS.InOut
	channel DressingStarted: InOut
	channel DressingComplete__: NIDS.InOut
	channel DressingComplete: InOut
	channel DressingAbandoned__: NIDS.InOut
	channel DressingAbandoned: InOut
	channel retryAgreed__: NIDS.InOut
	channel retryAgreed: InOut
	channel roomTemperature__: NIDS.InOut.core_int
	channel roomTemperature: InOut.core_int
	channel assentToSupportCalls__: NIDS.InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel SupportCalled__: NIDS.InOut
	channel SupportCalled: InOut
	
	-- Declaring call and ret events for undefined operations
	channel DressCall: core_int
	channel RetryCall
	channel ClearCall
	channel CallSupportDecisionCall
	
	enterSS = {|
	i0::enter,
	Idle::enter,
	Dressing::enter,
	Abandoned::enter
	|}
	
	enteredSS = 	{|
	Idle::entered,
	Dressing::entered,
	Abandoned::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	DressingStarted,
		DressingComplete,
		DressingAbandoned,
		retryAgreed,
		roomTemperature,
		assentToSupportCalls,
		SupportCalled
	,	DressCall,
		RetryCall,
		ClearCall,
		CallSupportDecisionCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Idle
	module Idle
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Dressing
	module Dressing
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
					 	  			id__
					 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
						id__,
						temp
					)) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP))) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
					 	  			id__
					 	  		);true&(share__choice(DressingComplete.out -> SKIP)) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((share__choice(get_temp?temp -> true&CALL__Dress(
						id__,
						temp
					)) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Abandoned
	module Abandoned
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((true&CALL__Retry(
						id__
					) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; true&CALL__Clear(
					 	  			id__
					 	  		) ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((true&CALL__Retry(
						id__
					) ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__Dress(id__,
				param_temp) 	= DressCall.param_temp -> SKIP
	CALL__Retry(id__) 	= RetryCall -> SKIP
	CALL__Clear(id__) 	= ClearCall -> SKIP
	CALL__CallSupportDecision(id__) 	= CallSupportDecisionCall -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_retry?retry -> get_completed?completed -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
			 	 [] dbisim((true)&(DressingStarted__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Dressing::enter -> SKIP)))
			 	 [] dbisim((true)&(DressingAbandoned__!NID_Dressing.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Abandoned::enter -> SKIP)))
			 	 [] dbisim((completed)&(internal__!NID_Dressing -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
			 	 [] dbisim((retry)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(retryAgreed.out -> SKIP)) ; Dressing::enter -> SKIP)))
			 	 [] dbisim((true)&(internal__!NID_Abandoned -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
			 			id__
			 		) ; Idle::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter,
				Dressing::enter,
				Abandoned::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   Idle::D__(id__)
					   [| { share__, terminate } |] (
					   Dressing::D__(id__)
					   [| { share__, terminate } |] (
					   Abandoned::D__(id__)
					   )
					   )
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
					 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
					 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_retry <- setL_retry,set_completed <- setL_completed]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_retry
					 			,setL_completed
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
					 )
					)[[setL_retry <- set_retry,setL_completed <- set_completed]]
					)
				)
				 \ hideSet)
				[[
					DressingStarted__.x____ <- DressingStarted,
					DressingComplete__.x____ <- DressingComplete,
					DressingAbandoned__.x____ <- DressingAbandoned,
					retryAgreed__.x____ <- retryAgreed,
					roomTemperature__.x____ <- roomTemperature,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__)
										[| {|get_assent,set_assent,terminate|} |]
										Memory_assent(true)
									)\{|get_assent,set_assent|}
								)
								[| {|get_completed,set_completed,terminate|} |]
								Memory_completed(true)
							)\{|get_completed,set_completed|}
						)
						[| {|get_retry,set_retry,terminate|} |]
						Memory_retry(true)
					)\{|get_retry,set_retry|}
				)
				[| {|get_temp,set_temp,terminate|} |]
				Memory_temp(0)
			)\{|get_temp,set_temp|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter,
				Dressing::enter,
				Abandoned::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing,internal__.NID_Abandoned,internal__.NID_Abandoned|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Idle::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Dressing::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Abandoned::VS_O__(id__)
					   )
					   )
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in|}]]
					 [[Dressing::interrupt <- x__ | x__ <- {|interrupt,DressingAbandoned__.NID_Dressing.in,internal__.NID_Dressing|}]]
					 [[Abandoned::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Abandoned,internal__.NID_Abandoned|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_retry <- setL_retry,set_completed <- setL_completed]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_retry
					 			,setL_completed
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_retry,setL_completed |} ]]
					 )
					)[[setL_retry <- set_retry,setL_completed <- set_completed]]
					)
				)
				 \ hideSet)
				[[
					DressingStarted__.x____ <- DressingStarted,
					DressingComplete__.x____ <- DressingComplete,
					DressingAbandoned__.x____ <- DressingAbandoned,
					retryAgreed__.x____ <- retryAgreed,
					roomTemperature__.x____ <- roomTemperature,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__)
										[| {|get_assent,set_assent,terminate|} |]
										Memory_assent(true)
									)\{|get_assent,set_assent|}
								)
								[| {|get_completed,set_completed,terminate|} |]
								Memory_completed(true)
							)\{|get_completed,set_completed|}
						)
						[| {|get_retry,set_retry,terminate|} |]
						Memory_retry(true)
					)\{|get_retry,set_retry|}
				)
				[| {|get_temp,set_temp,terminate|} |]
				Memory_temp(0)
			)\{|get_temp,set_temp|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_temp(temp) =
		get_temp!temp -> Memory_temp(temp)
		[]
		set_temp?x__ -> Memory_temp(x__)
		[]
		terminate -> SKIP
	Memory_retry(retry) =
		get_retry!retry -> Memory_retry(retry)
		[]
		set_retry?x__ -> Memory_retry(x__)
		[]
		terminate -> SKIP
	Memory_completed(completed) =
		get_completed!completed -> Memory_completed(completed)
		[]
		set_completed?x__ -> Memory_completed(x__)
		[]
		terminate -> SKIP
	Memory_assent(assent) =
		get_assent!assent -> Memory_assent(assent)
		[]
		set_assent?x__ -> Memory_assent(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_temp(0)
	[| { terminate } |] (
	Memory_retry(true)
	[| { terminate } |] (
	Memory_completed(true)
	[| { terminate } |] (
	Memory_assent(true)
	)
	)
	)
	
	getsetLocalChannels = {|get_temp,set_temp,get_retry,set_retry,get_completed,set_completed,get_assent,set_assent|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
module MonitoringService
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Idle|
	              NID_j0|
	              NID_OpenCurtains
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_underDressed, set_underDressed, setL_underDressed, setR_underDressed: core_boolean
	channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
	channel get_distress, set_distress, setL_distress, setR_distress: Distress
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel CurtainOpenRqt__: NIDS.InOut
	channel CurtainOpenRqt: InOut
	channel CurtainsOpened__: NIDS.InOut
	channel CurtainsOpened: InOut
	channel refuseRequest__: NIDS.InOut
	channel refuseRequest: InOut
	channel userUnderDressed__: NIDS.InOut.core_boolean
	channel userUnderDressed: InOut.core_boolean
	channel userDistressed__: NIDS.InOut.Distress
	channel userDistressed: InOut.Distress
	channel UserFallen__: NIDS.InOut
	channel UserFallen: InOut
	channel assentToSupportCalls__: NIDS.InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel SupportCalled__: NIDS.InOut
	channel SupportCalled: InOut
	
	-- Declaring call and ret events for undefined operations
	channel OpenCurtainsCall
	channel CallSupportDecisionCall
	
	enterSS = {|
	i0::enter,
	Idle::enter,
	j0::enter,
	OpenCurtains::enter
	|}
	
	enteredSS = 	{|
	Idle::entered,
	OpenCurtains::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	CurtainOpenRqt,
		CurtainsOpened,
		refuseRequest,
		userUnderDressed,
		userDistressed,
		UserFallen,
		assentToSupportCalls,
		SupportCalled
	,	OpenCurtainsCall,
		CallSupportDecisionCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Idle
	module Idle
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: j0
	module j0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: OpenCurtains
	module OpenCurtains
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__OpenCurtains(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__OpenCurtains(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__OpenCurtains(id__) 	= OpenCurtainsCall -> SKIP
	CALL__CallSupportDecision(id__) 	= CallSupportDecisionCall -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_distress?distress -> get_underDressed?underDressed -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
			 	 [] dbisim((true)&(CurtainOpenRqt__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(userUnderDressed.in?underDressed -> (SStop /\ set_underDressed!underDressed -> SKIP)));true&(share__choice(userDistressed.in?distress -> (SStop /\ set_distress!distress -> SKIP))) ; j0::enter -> SKIP)))
			 	 [] dbisim(((underDressed and (distress!=Distress_high)))&(internal__!NID_j0 -> SKIP ;  ((true&(share__choice(refuseRequest.out -> SKIP)) ; Idle::enter -> SKIP))))
			 	 [] dbisim(((not (((underDressed and (distress!=Distress_high))))))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; OpenCurtains::enter -> SKIP))))
			 	 [] dbisim((true)&(internal__!NID_OpenCurtains -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; Idle::enter -> SKIP)))
			 	 [] dbisim((true)&(UserFallen__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupportDecision(
			 			id__
			 		) ; OpenCurtains::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter,
				j0::enter,
				OpenCurtains::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   Idle::D__(id__)
					   [| { share__, terminate } |] (
					   j0::D__(id__)
					   [| { share__, terminate } |] (
					   OpenCurtains::D__(id__)
					   )
					   )
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
					 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distress
					 			,setL_underDressed
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
					 )
					)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
					)
				)
				 \ hideSet)
				[[
					CurtainOpenRqt__.x____ <- CurtainOpenRqt,
					CurtainsOpened__.x____ <- CurtainsOpened,
					refuseRequest__.x____ <- refuseRequest,
					userUnderDressed__.x____ <- userUnderDressed,
					userDistressed__.x____ <- userDistressed,
					UserFallen__.x____ <- UserFallen,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour(id__)
								[| {|get_distress,set_distress,terminate|} |]
								Memory_distress(Distress_low)
							)\{|get_distress,set_distress|}
						)
						[| {|get_assent,set_assent,terminate|} |]
						Memory_assent(true)
					)\{|get_assent,set_assent|}
				)
				[| {|get_underDressed,set_underDressed,terminate|} |]
				Memory_underDressed(true)
			)\{|get_underDressed,set_underDressed|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter,
				j0::enter,
				OpenCurtains::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,CurtainOpenRqt__.NID_Idle.in,internal__.NID_j0,internal__.NID_j0,internal__.NID_OpenCurtains,UserFallen__.NID_Idle.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Idle::VS_O__(id__)
					   [| { share__, terminate } |] (
					   j0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   OpenCurtains::VS_O__(id__)
					   )
					   )
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in|}]]
					 [[OpenCurtains::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_OpenCurtains|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_distress <- setL_distress,set_underDressed <- setL_underDressed]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_distress
					 			,setL_underDressed
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_distress,setL_underDressed |} ]]
					 )
					)[[setL_distress <- set_distress,setL_underDressed <- set_underDressed]]
					)
				)
				 \ hideSet)
				[[
					CurtainOpenRqt__.x____ <- CurtainOpenRqt,
					CurtainsOpened__.x____ <- CurtainsOpened,
					refuseRequest__.x____ <- refuseRequest,
					userUnderDressed__.x____ <- userUnderDressed,
					userDistressed__.x____ <- userDistressed,
					UserFallen__.x____ <- UserFallen,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								Behaviour_VS_O(id__)
								[| {|get_distress,set_distress,terminate|} |]
								Memory_distress(Distress_low)
							)\{|get_distress,set_distress|}
						)
						[| {|get_assent,set_assent,terminate|} |]
						Memory_assent(true)
					)\{|get_assent,set_assent|}
				)
				[| {|get_underDressed,set_underDressed,terminate|} |]
				Memory_underDressed(true)
			)\{|get_underDressed,set_underDressed|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_underDressed(underDressed) =
		get_underDressed!underDressed -> Memory_underDressed(underDressed)
		[]
		set_underDressed?x__ -> Memory_underDressed(x__)
		[]
		terminate -> SKIP
	Memory_assent(assent) =
		get_assent!assent -> Memory_assent(assent)
		[]
		set_assent?x__ -> Memory_assent(x__)
		[]
		terminate -> SKIP
	Memory_distress(distress) =
		get_distress!distress -> Memory_distress(distress)
		[]
		set_distress?x__ -> Memory_distress(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_underDressed(true)
	[| { terminate } |] (
	Memory_assent(true)
	[| { terminate } |] (
	Memory_distress(Distress_low)
	)
	)
	
	getsetLocalChannels = {|get_underDressed,set_underDressed,get_assent,set_assent,get_distress,set_distress|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule

-- compileSelfContainedOperation
module OP_CallSupportDecision
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0|
	              NID_CallSupport|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel assentToSupportCalls__: NIDS.InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel SupportCalled__: NIDS.InOut
	channel SupportCalled: InOut
	
	-- Declaring call and ret events for undefined operations
	channel CallSupportCall
	
	enterSS = {|
	i0::enter,
	f0::enter,
	CallSupport::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	f0::entered,
	CallSupport::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	assentToSupportCalls,
		SupportCalled
	,	CallSupportCall
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: CallSupport
	module CallSupport
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__CallSupport(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= true&CALL__CallSupport(
						id__
					) ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: j0
	module j0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__CallSupport(id__) 	= CallSupportCall -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = share__choice(get_assent?assent -> (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP))) ; j0::enter -> SKIP))))
			 	 [] dbisim((true)&(SupportCalled__!NID_CallSupport.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
			 	 [] dbisim((assent)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; CallSupport::enter -> SKIP))))
			 	 [] dbisim(((not (assent)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter,
				CallSupport::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   f0::D__(id__)
					   [| { share__, terminate } |] (
					   CallSupport::D__(id__)
					   [| { share__, terminate } |] (
					   j0::D__(id__)
					   )
					   )
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_assent <- setL_assent]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_assent
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
					 )
					)[[setL_assent <- set_assent]]
					)
				)
				 \ hideSet)
				[[
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				Behaviour(id__)
				[| {|get_assent,set_assent,terminate|} |]
				Memory_assent(true)
			)\{|get_assent,set_assent|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter,
				CallSupport::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,SupportCalled__.NID_CallSupport.in,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   CallSupport::VS_O__(id__)
					   [| { share__, terminate } |] (
					   j0::VS_O__(id__)
					   )
					   )
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[CallSupport::interrupt <- x__ | x__ <- {|interrupt,SupportCalled__.NID_CallSupport.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					  [[set_assent <- setL_assent]]
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					 			,setL_assent
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__,setL_assent |} ]]
					 )
					)[[setL_assent <- set_assent]]
					)
				)
				 \ hideSet)
				[[
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				Behaviour_VS_O(id__)
				[| {|get_assent,set_assent,terminate|} |]
				Memory_assent(true)
			)\{|get_assent,set_assent|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_assent(assent) =
		get_assent!assent -> Memory_assent(assent)
		[]
		set_assent?x__ -> Memory_assent(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_assent(true)
	
	getsetLocalChannels = {|get_assent,set_assent|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
			endmodule
-- compileSelfContainedOperation
module OP_OpenCurtains
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel CurtainsOpened__: NIDS.InOut
	channel CurtainsOpened: InOut
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	CurtainsOpened
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(share__choice(CurtainsOpened.out -> SKIP)) ; f0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   f0::D__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					CurtainsOpened__.x____ <- CurtainsOpened
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(Behaviour(id__))
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					CurtainsOpened__.x____ <- CurtainsOpened
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(Behaviour_VS_O(id__))
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
			endmodule
-- compileSelfContainedOperation
module OP_Retry
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
	
	-- Shared variable channels
	channel set_EXT_retry: core_boolean
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_retry
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_retry, set_retry
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_retry!true -> SKIP))) ; f0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   f0::D__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(Behaviour(id__))
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(Behaviour_VS_O(id__))
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
			endmodule
-- compileSelfContainedOperation
module OP_Dress
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0|
	              NID_j0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
	
	-- Shared variable channels
	channel set_EXT_completed: core_boolean
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter,
	j0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_completed
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_completed, set_completed
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__,
					param_temp) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__,
					param_temp) = D__(id__,
					param_temp)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__,
					param_temp) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_temp) = D__(id__,
					param_temp)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Junction: j0
	module j0
	exports
	
		channel enter, interrupt
		
		D__(id__,
					param_temp) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__,
					param_temp) = D__(id__,
					param_temp)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__,
				param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_temp) \ {terminate}
	
	STM_VS_O(id__,
				param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__,
				param_temp) \ {terminate}
	
	-- Transitions
	Transitions(id__,
				param_temp) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
			 	 [] dbisim(((param_temp<17))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
			 	 [] dbisim((((param_temp>=17) and (param_temp<19)))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
			 	 [] dbisim(((param_temp>=19))&(internal__!NID_j0 -> SKIP ;  ((SKIP;share__choice(true & (share__choice(set_completed!true -> SKIP))) ; f0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__,
				param_temp) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__,
					   			param_temp)
					   [| { share__, terminate } |] (
					   f0::D__(id__,
					   			param_temp)
					   [| { share__, terminate } |] (
					   j0::D__(id__,
					   			param_temp)
					   )
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 			param_temp))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__,
				param_temp) = 
		dbisim((MachineBody(id__,
					param_temp)\ enteredSS)
		)
	
	IteratedBehaviour(id__,
				param_temp) = 
		dbisim((MachineBody(id__,
					param_temp)\ enteredSS)
		)
	
	Stateful(id__,
				param_temp) = 
		((
			(Behaviour(id__,
						param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_temp))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__,
				param_temp) =
		(Behaviour(id__,
					param_temp))
	
	-- Visible counterparts
	MachineBody_VS_O(id__,
				param_temp) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter,
				j0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__,
					   			param_temp)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__,
					   			param_temp)
					   [| { share__, terminate } |] (
					   j0::VS_O__(id__,
					   			param_temp)
					   )
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0,internal__.NID_j0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__,
					 			param_temp))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__,
				param_temp) = 
		dbisim((MachineBody_VS_O(id__,
					param_temp))
		)
	
	IteratedBehaviour_VS_O(id__,
				param_temp) = 
		dbisim((MachineBody_VS_O(id__,
					param_temp))
		)
	
	Stateful_VS_O(id__,
				param_temp) = 
		dbisim((
			(Behaviour_VS_O(id__,
						param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
						param_temp))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__,
				param_temp) =
		(Behaviour_VS_O(id__,
					param_temp))
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__,
				param_temp) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__,
				param_temp) = STM_VS_O(id__,
				param_temp)
	
	D__(id__,
				param_temp) = STM(id__,
				param_temp) \ internal_events
	O__(id__,
				param_temp) = sbisim(diamond(D__(id__,
				param_temp)))
	VS__(id__,
				param_temp) = FVS__(id__,
				param_temp)
	VS_O__(id__,
				param_temp) = sbisim(diamond(FVS__(id__,
				param_temp)))
	HEXT__(id__,
				param_temp) = O__(id__,
				param_temp) [|shared_variable_events|] SKIP
	HUP__(id__,
				param_temp) = O__(id__,
				param_temp) [|{share__}|] SKIP
			endmodule
-- compileSelfContainedOperation
module OP_Clear
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_f0
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_retry, set_retry, setL_retry, setR_retry: core_boolean
	channel get_completed, set_completed, setL_completed, setR_completed: core_boolean
	
	-- Shared variable channels
	channel set_EXT_retry: core_boolean
	channel set_EXT_completed: core_boolean
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	
	-- Declaring call and ret events for undefined operations
	
	enterSS = {|
	i0::enter,
	f0::enter
	|}
	
	enteredSS = 	{|
	f0::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
		set_EXT_retry,
		set_EXT_completed
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	set_EXT_retry, set_retry,
		set_EXT_completed, set_completed
		, share__
		|}
	
	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- Final state: f0
	module f0
	
	exports
	
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
		--	Rule: behaviours(Node)
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
				
				Entering 	= entered -> SKIP ; Active
				Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
				Interrupted	= share__choice(exit -> exited -> Inactive)
			within
				Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	STM_VS_O(id__) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
	Stateful(id__) \ {terminate}
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(true & (share__choice(set_completed!false -> SKIP)));share__choice(true & (share__choice(set_retry!false -> SKIP))) ; f0::enter -> SKIP))))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   f0::D__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(Behaviour(id__))
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {|f0::entered|}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   f0::VS_O__(id__)
					   )
					 )
					 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(Behaviour_VS_O(id__))
	
	-- END
	
	-- Memory
	-- Memory variables
	
	-- varMemory process
	varMemory(id__) = terminate -> SKIP
	
	getsetLocalChannels = {||}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
			endmodule

endmodule
