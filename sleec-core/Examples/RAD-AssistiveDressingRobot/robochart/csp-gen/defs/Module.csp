
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 31-08-2023 19:18:10
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module Module
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel DressingStarted: InOut
	channel DressingComplete: InOut
	channel DressingAbandoned: InOut
	channel retryAgreed: InOut
	channel CurtainOpenRqt: InOut
	channel CurtainsOpened: InOut
	channel roomTemperature: InOut.core_int
	channel UserFallen: InOut
	channel userUnderDressed: InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel userDistressed: InOut.Distress
	channel retryAgreed: InOut
	channel refuseRequest: InOut
	channel SupportCalled: InOut
	
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		DressingStarted,
		DressingComplete,
		DressingAbandoned,
		retryAgreed,
		CurtainOpenRqt,
		CurtainsOpened,
		roomTemperature,
		UserFallen,
		userUnderDressed,
		assentToSupportCalls,
		userDistressed,
		retryAgreed,
		refuseRequest,
		SupportCalled
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			channel DressingStarted: InOut
			channel DressingComplete: InOut
			channel DressingAbandoned: InOut
			channel retryAgreed: InOut
			channel UserFallen: InOut
			channel userUnderDressed: InOut.core_boolean
			channel assentToSupportCalls: InOut.core_boolean
			channel userDistressed: InOut.Distress
			channel CurtainOpenRqt: InOut
			channel CurtainsOpened: InOut
			channel roomTemperature: InOut.core_int
			channel retryAgreed: InOut
			channel refuseRequest: InOut
			channel SupportCalled: InOut
			
			
			
			-- declaring call and ret events for undefined operations
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	DressingStarted,
				DressingComplete,
				DressingAbandoned,
				retryAgreed,
				UserFallen,
				userUnderDressed,
				assentToSupportCalls,
				userDistressed,
				CurtainOpenRqt,
				CurtainsOpened,
				roomTemperature,
				retryAgreed,
				refuseRequest,
				SupportCalled
			|}
	
			-- defined operations
			-- compileOperationDef
			module OP_Dressing
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_j0|
				              NID_j1|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				j0::enter,
				j1::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j1
				module j1
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_temp) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_temp) = D__(id__,
								param_temp)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_temp) \ {terminate}
				
				STM_VS_O(id__,
							param_temp) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_temp) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_temp) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
						 	 [] dbisim(((param_temp<19))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j1::enter -> SKIP))))
						 	 [] dbisim(((param_temp<17))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 	 [] dbisim(((param_temp>=19))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 	 [] dbisim(((param_temp>=17))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_temp) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j0::enter,
							j1::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j0::D__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j1::D__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_temp)
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_temp))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_temp) = 
					dbisim((MachineBody(id__,
								param_temp)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_temp) = 
					((
						(Behaviour(id__,
									param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_temp))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_temp) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j0::enter,
							j1::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j0,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   j1::VS_O__(id__,
								   			param_temp)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_temp)
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_temp))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_temp) = 
					dbisim((MachineBody_VS_O(id__,
								param_temp))
					)
				
				
				Stateful_VS_O(id__,
							param_temp) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_temp) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_temp))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_temp) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_temp) = STM_VS_O(id__,
							param_temp)
				
				D__(id__,
							param_temp) = STM(id__,
							param_temp) \ internal_events
				O__(id__,
							param_temp) = sbisim(diamond(D__(id__,
							param_temp)))
				VS__(id__,
							param_temp) = FVS__(id__,
							param_temp)
				VS_O__(id__,
							param_temp) = sbisim(diamond(FVS__(id__,
							param_temp)))
				HEXT__(id__,
							param_temp) = O__(id__,
							param_temp) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_temp) = O__(id__,
							param_temp) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_OpenCurtains
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_j0|
				              NID_f0|
				              NID_j1|
				              NID_j2
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel refuseRequest__: NIDS.InOut
				channel refuseRequest: InOut
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				channel CurtainOpenRqt__: NIDS.InOut
				channel CurtainOpenRqt: InOut
				channel CurtainsOpened__: NIDS.InOut
				channel CurtainsOpened: InOut
				channel roomTemperature__: NIDS.InOut.core_int
				channel roomTemperature: InOut.core_int
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				j0::enter,
				f0::enter,
				j1::enter,
				j2::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	retryAgreed,
					refuseRequest,
					SupportCalled,
					CurtainOpenRqt,
					CurtainsOpened,
					roomTemperature
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_underDressed,
								param_distress) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_underDressed,
								param_distress) = D__(id__,
								param_underDressed,
								param_distress)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j0
				module j0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_underDressed,
								param_distress) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_underDressed,
								param_distress) = D__(id__,
								param_underDressed,
								param_distress)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_underDressed,
								param_distress) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_underDressed,
								param_distress) = D__(id__,
								param_underDressed,
								param_distress)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j1
				module j1
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_underDressed,
								param_distress) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_underDressed,
								param_distress) = D__(id__,
								param_underDressed,
								param_distress)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Junction: j2
				module j2
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_underDressed,
								param_distress) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_underDressed,
								param_distress) = D__(id__,
								param_underDressed,
								param_distress)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_underDressed,
							param_distress) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_underDressed,
							param_distress) \ {terminate}
				
				STM_VS_O(id__,
							param_underDressed,
							param_distress) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_underDressed,
							param_distress) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_underDressed,
							param_distress) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; j0::enter -> SKIP))))
						 	 [] dbisim(((not (param_underDressed)))&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j2::enter -> SKIP))))
						 	 [] dbisim((param_underDressed)&(internal__!NID_j0 -> SKIP ;  ((SKIP ; j1::enter -> SKIP))))
						 	 [] dbisim(((param_distress==Distress_high))&(internal__!NID_j1 -> SKIP ;  ((SKIP ; j2::enter -> SKIP))))
						 	 [] dbisim((true)&(internal__!NID_j2 -> SKIP ;  ((SKIP;true&(share__choice(CurtainsOpened.out -> SKIP)) ; f0::enter -> SKIP))))
						 	 [] dbisim(((not ((param_distress==Distress_high))))&(internal__!NID_j1 -> SKIP ;  ((SKIP;true&(share__choice(refuseRequest.out -> SKIP)) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_underDressed,
							param_distress) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j0::enter,
							f0::enter,
							j1::enter,
							j2::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j2,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j0::D__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j1::D__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j2::D__(id__,
								   			param_underDressed,
								   			param_distress)
								   )
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_underDressed,
								 			param_distress))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled,
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								roomTemperature__.x____ <- roomTemperature
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_underDressed,
							param_distress) = 
					dbisim((MachineBody(id__,
								param_underDressed,
								param_distress)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_underDressed,
							param_distress) = 
					((
						(Behaviour(id__,
									param_underDressed,
									param_distress) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_underDressed,
									param_distress))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_underDressed,
							param_distress) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							j0::enter,
							f0::enter,
							j1::enter,
							j2::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_j0,internal__.NID_j0,internal__.NID_j1,internal__.NID_j2,internal__.NID_j1|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j0::VS_O__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j1::VS_O__(id__,
								   			param_underDressed,
								   			param_distress)
								   [| { share__, terminate } |] (
								   j2::VS_O__(id__,
								   			param_underDressed,
								   			param_distress)
								   )
								   )
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 [[j0::interrupt <- x__ | x__ <- {|internal__.NID_j0,internal__.NID_j0|}]]
								 [[j1::interrupt <- x__ | x__ <- {|internal__.NID_j1,internal__.NID_j1|}]]
								 [[j2::interrupt <- x__ | x__ <- {|internal__.NID_j2|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_underDressed,
								 			param_distress))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled,
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								roomTemperature__.x____ <- roomTemperature
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_underDressed,
							param_distress) = 
					dbisim((MachineBody_VS_O(id__,
								param_underDressed,
								param_distress))
					)
				
				
				Stateful_VS_O(id__,
							param_underDressed,
							param_distress) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_underDressed,
									param_distress) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_underDressed,
									param_distress))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_underDressed,
							param_distress) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_underDressed,
							param_distress) = STM_VS_O(id__,
							param_underDressed,
							param_distress)
				
				D__(id__,
							param_underDressed,
							param_distress) = STM(id__,
							param_underDressed,
							param_distress) \ internal_events
				O__(id__,
							param_underDressed,
							param_distress) = sbisim(diamond(D__(id__,
							param_underDressed,
							param_distress)))
				VS__(id__,
							param_underDressed,
							param_distress) = FVS__(id__,
							param_underDressed,
							param_distress)
				VS_O__(id__,
							param_underDressed,
							param_distress) = sbisim(diamond(FVS__(id__,
							param_underDressed,
							param_distress)))
				HEXT__(id__,
							param_underDressed,
							param_distress) = O__(id__,
							param_underDressed,
							param_distress) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_underDressed,
							param_distress) = O__(id__,
							param_underDressed,
							param_distress) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_AbandonDressing
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0|
				              NID_s0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_done, set_done, setL_done, setR_done: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel refuseRequest__: NIDS.InOut
				channel refuseRequest: InOut
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter,
				s0::enter
				|}
				
				enteredSS = 	{|
				f0::entered,
				s0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	retryAgreed,
					refuseRequest,
					SupportCalled
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_assent) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_assent) = D__(id__,
								param_assent)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_assent) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_assent) = D__(id__,
								param_assent)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: s0
				module s0
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__,
								param_assent) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((true&(share__choice(retryAgreed.out -> SKIP));share__choice(true & (share__choice(set_done!true -> SKIP))) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_assent) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((true&(share__choice(retryAgreed.out -> SKIP));share__choice(true & (share__choice(set_done!true -> SKIP))) ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__CallSupport(id__,
							param_assent) = (OP_CallSupport::O__(id__,
							param_assent))
				[[
					OP_CallSupport::retryAgreed <- retryAgreed,
					OP_CallSupport::refuseRequest <- refuseRequest,
					OP_CallSupport::SupportCalled <- SupportCalled
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_assent) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_assent) \ {terminate}
				
				STM_VS_O(id__,
							param_assent) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_assent) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_assent) = ((let
					Trans = share__choice(get_done?done -> (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; s0::enter -> SKIP))))
						 	 [] dbisim((done)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; SKIP ; f0::enter -> SKIP)))
						 	 [] dbisim((true)&(internal__!NID_s0 -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&CALL__CallSupport(
						 			id__,
						 			param_assent
						 		) ; f0::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_assent) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   s0::D__(id__,
								   			param_assent)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_done <- setL_done]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_done
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_assent))
								  [[ share__ <- x__ | x__ <- {| share__,setL_done |} ]]
								 )
								)[[setL_done <- set_done]]
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_assent) = 
					dbisim((MachineBody(id__,
								param_assent)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_assent) = 
					((
						(Behaviour(id__,
									param_assent) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_assent))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_assent) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter,
							s0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,internal__.NID_s0,internal__.NID_s0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   s0::VS_O__(id__,
								   			param_assent)
								   )
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[s0::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_s0,internal__.NID_s0|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								  [[set_done <- setL_done]]
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								 			,setL_done
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_assent))
								  [[ share__ <- x__ | x__ <- {| share__,setL_done |} ]]
								 )
								)[[setL_done <- set_done]]
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_assent) = 
					dbisim((MachineBody_VS_O(id__,
								param_assent))
					)
				
				
				Stateful_VS_O(id__,
							param_assent) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_assent) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_assent))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_done(done) =
					get_done!done -> Memory_done(done)
					[]
					set_done?x__ -> Memory_done(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__,
							param_assent) = Memory_done(false)
				
				getsetLocalChannels = {|get_done,set_done|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_assent) = STM_VS_O(id__,
							param_assent)
				
				D__(id__,
							param_assent) = STM(id__,
							param_assent) \ internal_events
				O__(id__,
							param_assent) = sbisim(diamond(D__(id__,
							param_assent)))
				VS__(id__,
							param_assent) = FVS__(id__,
							param_assent)
				VS_O__(id__,
							param_assent) = sbisim(diamond(FVS__(id__,
							param_assent)))
				HEXT__(id__,
							param_assent) = O__(id__,
							param_assent) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_assent) = O__(id__,
							param_assent) [|{share__}|] SKIP
						endmodule
			-- compileOperationDef
			module OP_CallSupport
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel refuseRequest__: NIDS.InOut
				channel refuseRequest: InOut
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	retryAgreed,
					refuseRequest,
					SupportCalled
					, share__
					|}
				
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__,
								param_assent) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__,
								param_assent) = D__(id__,
								param_assent)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- Final state: f0
				module f0
				
				exports
				
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
					--	Rule: behaviours(Node)
					D__(id__,
								param_assent) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
							
							Entering 	= entered -> SKIP ; Active
							Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
							Interrupted	= share__choice(exit -> exited -> Inactive)
						within
							Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__,
								param_assent) = D__(id__,
								param_assent)
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				-- END of Operation calls --
				
				-- STM processes
				STM(id__,
							param_assent) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_assent) \ {terminate}
				
				STM_VS_O(id__,
							param_assent) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
				Stateful(id__,
							param_assent) \ {terminate}
				
				-- Transitions
				Transitions(id__,
							param_assent) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&(if param_assent then (true&(share__choice(SupportCalled.out -> SKIP))) else (SKIP)) ; f0::enter -> SKIP))))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__,
							param_assent) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   f0::D__(id__,
								   			param_assent)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_assent))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__,
							param_assent) = 
					dbisim((MachineBody(id__,
								param_assent)\ enteredSS)
					)
				
				
				Stateful(id__,
							param_assent) = 
					((
						(Behaviour(id__,
									param_assent) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_assent))
					 	\getsetLocalChannels
					)
					)
				
				
				-- Visible counterparts
				MachineBody_VS_O(id__,
							param_assent) = 
					dbisim((
					let
						finalNodesEntered = {|f0::entered|}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							f0::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__,
								   			param_assent)
								   [| { share__, terminate } |] (
								   f0::VS_O__(id__,
								   			param_assent)
								   )
								 )
								 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__,
								 			param_assent))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__,
							param_assent) = 
					dbisim((MachineBody_VS_O(id__,
								param_assent))
					)
				
				
				Stateful_VS_O(id__,
							param_assent) = 
					dbisim((
						(Behaviour_VS_O(id__,
									param_assent) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__,
									param_assent))
					 	\getsetLocalChannels
					)
					)
				
				
				-- END
				
				-- Memory
				-- Memory variables
				
				-- varMemory process
				varMemory(id__,
							param_assent) = terminate -> SKIP
				
				getsetLocalChannels = {||}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__,
							param_assent) = STM_VS_O(id__,
							param_assent)
				
				D__(id__,
							param_assent) = STM(id__,
							param_assent) \ internal_events
				O__(id__,
							param_assent) = sbisim(diamond(D__(id__,
							param_assent)))
				VS__(id__,
							param_assent) = FVS__(id__,
							param_assent)
				VS_O__(id__,
							param_assent) = sbisim(diamond(FVS__(id__,
							param_assent)))
				HEXT__(id__,
							param_assent) = O__(id__,
							param_assent) [|shared_variable_events|] SKIP
				HUP__(id__,
							param_assent) = O__(id__,
							param_assent) [|{share__}|] SKIP
						endmodule
		
			-- declaring machines
			module stm_ref0
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Idle
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				channel get_temp, set_temp, setL_temp, setR_temp: core_int
				channel get_underdressed, set_underdressed, setL_underdressed, setR_underdressed: core_boolean
				channel get_distressed, set_distressed, setL_distressed, setR_distressed: Distress
				channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				channel get_AbandonDressing_done, set_AbandonDressing_done: core_boolean
				
				-- Declaring state machine events
				channel DressingStarted__: NIDS.InOut
				channel DressingStarted: InOut
				channel DressingComplete__: NIDS.InOut
				channel DressingComplete: InOut
				channel DressingAbandoned__: NIDS.InOut
				channel DressingAbandoned: InOut
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel CurtainOpenRqt__: NIDS.InOut
				channel CurtainOpenRqt: InOut
				channel CurtainsOpened__: NIDS.InOut
				channel CurtainsOpened: InOut
				channel roomTemperature__: NIDS.InOut.core_int
				channel roomTemperature: InOut.core_int
				channel UserFallen__: NIDS.InOut
				channel UserFallen: InOut
				channel userUnderDressed__: NIDS.InOut.core_boolean
				channel userUnderDressed: InOut.core_boolean
				channel assentToSupportCalls__: NIDS.InOut.core_boolean
				channel assentToSupportCalls: InOut.core_boolean
				channel userDistressed__: NIDS.InOut.Distress
				channel userDistressed: InOut.Distress
				channel retryAgreed__: NIDS.InOut
				channel retryAgreed: InOut
				channel refuseRequest__: NIDS.InOut
				channel refuseRequest: InOut
				channel SupportCalled__: NIDS.InOut
				channel SupportCalled: InOut
				
				-- Declaring call and ret events for undefined operations
				
				enterSS = {|
				i0::enter,
				Idle::enter
				|}
				
				enteredSS = 	{|
				Idle::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	DressingStarted,
					DressingComplete,
					DressingAbandoned,
					retryAgreed,
					CurtainOpenRqt,
					CurtainsOpened,
					roomTemperature,
					UserFallen,
					userUnderDressed,
					assentToSupportCalls,
					userDistressed,
					retryAgreed,
					refuseRequest,
					SupportCalled
					|}
			
				-- Nodes --
				-- declaring all nodes
				
				----------------------------------------------------------------------
				-- Initial: i0
				module i0
				exports
				
					channel enter, interrupt
					
					D__(id__) = 
						dbisim(let
							Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
							
							Termination = terminate -> SKIP
							
							Active 		= share__choice(interrupt -> SKIP) ; Inactive
						within
							Inactive [| {terminate} |> SKIP)
					
					VS_O__(id__) = D__(id__)
				
				endmodule
				----------------------------------------------------------------------
				
				
				----------------------------------------------------------------------
				-- State: Idle
				module Idle
				
				enterSS = {}
				
				enteredSS = {}
				
				exports
				
					--  Declarations
					
					channel enter, entered, interrupt
					channel enteredL, enteredR
					
									
					
					--	Nodes
					-- declaring all nodes
					
					
					--	Rule: behaviours(Node)
					--  Note that FDR has problems with efficiently compiling the process below
					-- 	if using a different recursion pattern.
					D__(id__) = 
					dbisim(let
						-- IMPLEMENTATION NOTE: 
						-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
						-- however FDR struggles with that form in certain cases. So we use the exception operator
						-- instead to 'terminate'.
						
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
						
					VS_O__(id__) = 
					dbisim(let
						Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
						
						Termination = terminate -> SKIP
						
						Active 		= SKIP ; 
								 	  Behaviour ; 
								 	  share__choice(exit -> SKIP) ; SKIP ; 
								 	  share__choice(exited -> SKIP) ; Inactive
					
						Behaviour 	= entered -> During
						During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
					within
						Inactive [| {terminate} |> SKIP)
					
				
				endmodule
				----------------------------------------------------------------------
				
				-- END of Nodes --
				
				-- Operation calls --
				-- Only the undefined operations are declared here.
				-- If the state machine is in isolation, all required operations will be undefined.
				-- If it is in the context of a controller, the required operations not provided by the
				-- controller will be declared here, and the defined operations will be defined in the
				-- context of the Controller module, and therefore within scope of the state machine module.
				
				CALL__OpenCurtains(id__,
							param_underDressed,
							param_distress) = (OP_OpenCurtains::O__(id__,
							param_underDressed,
							param_distress))
				[[
					OP_OpenCurtains::retryAgreed <- retryAgreed,
					OP_OpenCurtains::refuseRequest <- refuseRequest,
					OP_OpenCurtains::SupportCalled <- SupportCalled,
					OP_OpenCurtains::CurtainOpenRqt <- CurtainOpenRqt,
					OP_OpenCurtains::CurtainsOpened <- CurtainsOpened,
					OP_OpenCurtains::roomTemperature <- roomTemperature
				]]
				CALL__Dressing(id__,
							param_temp) = (OP_Dressing::O__(id__,
							param_temp))
				CALL__AbandonDressing(id__,
							param_assent) = (OP_AbandonDressing::O__(id__,
							param_assent))
				[[
					OP_AbandonDressing::retryAgreed <- retryAgreed,
					OP_AbandonDressing::refuseRequest <- refuseRequest,
					OP_AbandonDressing::SupportCalled <- SupportCalled
				]]
				CALL__CallSupport(id__,
							param_assent) = (OP_CallSupport::O__(id__,
							param_assent))
				[[
					OP_CallSupport::retryAgreed <- retryAgreed,
					OP_CallSupport::refuseRequest <- refuseRequest,
					OP_CallSupport::SupportCalled <- SupportCalled
				]]
				-- END of Operation calls --
				
				-- STM processes
				STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
				( 
					(
						(
							(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
						 	[[ share__ <- x__ | x__ <- {||} ]]
						)
					[| {share__} |]
					SKIP
					)
					[| union(sharedVarSync,{terminate}) |]
					dbisim(sharedVarMemory(id__))
				)\sharedVarHide
				
				-- Transitions
				Transitions(id__) = ((let
					Trans = (
						((share__ -> SKIP
						 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
						 	 [] dbisim((true)&(DressingStarted__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP)));share__choice(get_temp?temp -> true&CALL__Dressing(
						 			id__,
						 			temp
						 		));true&(share__choice(DressingComplete.out -> SKIP)) ; Idle::enter -> SKIP)))
						 	 [] dbisim((true)&(CurtainOpenRqt__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(userUnderDressed.in?underdressed -> (SStop /\ set_underdressed!underdressed -> SKIP)));true&(share__choice(userDistressed.in?distressed -> (SStop /\ set_distressed!distressed -> SKIP)));share__choice(get_underdressed?underdressed -> share__choice(get_distressed?distressed -> true&CALL__OpenCurtains(
						 			id__,
						 			underdressed,
						 			distressed
						 		))) ; Idle::enter -> SKIP)))
						 	 [] dbisim((true)&(UserFallen__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP)));share__choice(get_assent?assent -> true&CALL__CallSupport(
						 			id__,
						 			assent
						 		)) ; Idle::enter -> SKIP)))
						 	 [] dbisim((true)&(DressingAbandoned__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP)));share__choice(get_assent?assent -> true&CALL__AbandonDressing(
						 			id__,
						 			assent
						 		)) ; Idle::enter -> SKIP)))
						 ) ; Trans)
						 []
						 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
						 []
						 terminate -> SKIP
					)
				within
					Trans
				)
				)
				
				-- Stateful
				-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
				
				-- Named process definitions
				MachineBody(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::D__(id__)
								   [| { share__, terminate } |] (
								   Idle::D__(id__)
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								DressingStarted__.x____ <- DressingStarted,
								DressingComplete__.x____ <- DressingComplete,
								DressingAbandoned__.x____ <- DressingAbandoned,
								retryAgreed__.x____ <- retryAgreed,
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								roomTemperature__.x____ <- roomTemperature,
								UserFallen__.x____ <- UserFallen,
								userUnderDressed__.x____ <- userUnderDressed,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								userDistressed__.x____ <- userDistressed,
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				IteratedBehaviour(id__) = 
					dbisim((MachineBody(id__)\ enteredSS)
					)
				
				Stateful(id__) = 
					((
						(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour(id__)
													[| {|get_assent,set_assent,terminate|} |]
													Memory_assent(true)
												)\{|get_assent,set_assent|}
											)
											[| {|get_distressed,set_distressed,terminate|} |]
											Memory_distressed(Distress_low)
										)\{|get_distressed,set_distressed|}
									)
									[| {|get_underdressed,set_underdressed,terminate|} |]
									Memory_underdressed(true)
								)\{|get_underdressed,set_underdressed|}
							)
							[| {|get_temp,set_temp,terminate|} |]
							Memory_temp(0)
						)\{|get_temp,set_temp|}
					)
					)
				
				-- Visible counterparts
				MachineBody_VS_O(id__) = 
					dbisim((
					let
						finalNodesEntered = {||}
					within
						((let
							-- IMPLEMENTATION NOTE:
							-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
							-- modules for defining the semantics of each node.
							enterSS = {|
							i0::enter,
							Idle::enter
							|}
							hideSet = union(enterSS,{|exit,exited,internal__|})
						within 
							((let
								-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
								-- because CSPM modules are used for the semantics of Node.
								flowevts = union(enterSS,{|exit,exited,interrupt|})
								transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}
							within
								((
								 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
								   i0::VS_O__(id__)
								   [| { share__, terminate } |] (
								   Idle::VS_O__(id__)
								   )
								 )
								 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}]]
								 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
								 )
								  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
								 )
								 [| union(union(union(flowevts,transSync),{terminate}),{|share__
								|}) |]
								 ((i0::enter -> Transitions(id__))
								  [[ share__ <- x__ | x__ <- {| share__ |} ]]
								 )
								)
								)
							)
							 \ hideSet)
							[[
								DressingStarted__.x____ <- DressingStarted,
								DressingComplete__.x____ <- DressingComplete,
								DressingAbandoned__.x____ <- DressingAbandoned,
								retryAgreed__.x____ <- retryAgreed,
								CurtainOpenRqt__.x____ <- CurtainOpenRqt,
								CurtainsOpened__.x____ <- CurtainsOpened,
								roomTemperature__.x____ <- roomTemperature,
								UserFallen__.x____ <- UserFallen,
								userUnderDressed__.x____ <- userUnderDressed,
								assentToSupportCalls__.x____ <- assentToSupportCalls,
								userDistressed__.x____ <- userDistressed,
								retryAgreed__.x____ <- retryAgreed,
								refuseRequest__.x____ <- refuseRequest,
								SupportCalled__.x____ <- SupportCalled
								| x____ <- NIDS
							]]
						)
						 [| {| interrupt |} |] SKIP)
					)
					)
				
				Behaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				IteratedBehaviour_VS_O(id__) = 
					dbisim((MachineBody_VS_O(id__))
					)
				
				Stateful_VS_O(id__) = 
					dbisim((
						(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
					 	\getsetLocalChannels
					)
					)
				
				IteratedStateful_VS_O(id__) =
					(dbisim(
						sbisim(
							dbisim(
								sbisim(
									dbisim(
										sbisim(
											dbisim(
												sbisim(
													Behaviour_VS_O(id__)
													[| {|get_assent,set_assent,terminate|} |]
													Memory_assent(true)
												)\{|get_assent,set_assent|}
											)
											[| {|get_distressed,set_distressed,terminate|} |]
											Memory_distressed(Distress_low)
										)\{|get_distressed,set_distressed|}
									)
									[| {|get_underdressed,set_underdressed,terminate|} |]
									Memory_underdressed(true)
								)\{|get_underdressed,set_underdressed|}
							)
							[| {|get_temp,set_temp,terminate|} |]
							Memory_temp(0)
						)\{|get_temp,set_temp|}
					)
					)
				
				-- END
				
				-- Memory
				-- Memory variables
				Memory_temp(temp) =
					get_temp!temp -> Memory_temp(temp)
					[]
					set_temp?x__ -> Memory_temp(x__)
					[]
					terminate -> SKIP
				Memory_underdressed(underdressed) =
					get_underdressed!underdressed -> Memory_underdressed(underdressed)
					[]
					set_underdressed?x__ -> Memory_underdressed(x__)
					[]
					terminate -> SKIP
				Memory_distressed(distressed) =
					get_distressed!distressed -> Memory_distressed(distressed)
					[]
					set_distressed?x__ -> Memory_distressed(x__)
					[]
					terminate -> SKIP
				Memory_assent(assent) =
					get_assent!assent -> Memory_assent(assent)
					[]
					set_assent?x__ -> Memory_assent(x__)
					[]
					terminate -> SKIP
				
				-- varMemory process
				varMemory(id__) = Memory_temp(0)
				[| { terminate } |] (
				Memory_underdressed(true)
				[| { terminate } |] (
				Memory_distressed(Distress_low)
				[| { terminate } |] (
				Memory_assent(true)
				)
				)
				)
				
				getsetLocalChannels = {|get_temp,set_temp,get_underdressed,set_underdressed,get_distressed,set_distressed,get_assent,set_assent|}
				
				-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
				FVS__(id__) = STM_VS_O(id__)
				
				D__(id__) = STM(id__) \ internal_events
				O__(id__) = sbisim(diamond(D__(id__)))
				VS__(id__) = FVS__(id__)
				VS_O__(id__) = sbisim(diamond(FVS__(id__)))
				HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
				HUP__(id__) = O__(id__) [|{share__}|] SKIP
				
				-- Shared memory
				-- Shared memory variables
				
				-- sharedVarMemory process
				sharedVarMemory(id__) = terminate -> SKIP
				
				sharedVarSync = {||}
				
				sharedVarHide = {||}
			endmodule
			
				-- undefined operations
				
				-- declaring controller memory
				Memory(id__) = SKIP
				
				D__(id__) = 	((
						stm_ref0::D__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::userUnderDressed <- userUnderDressed,
							stm_ref0::CurtainsOpened <- CurtainsOpened,
							stm_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls,
							stm_ref0::userDistressed <- userDistressed,
							stm_ref0::UserFallen <- UserFallen,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::refuseRequest <- refuseRequest,
							stm_ref0::SupportCalled <- SupportCalled,
							stm_ref0::retryAgreed <- retryAgreed
						]]
						\ {|
							stm_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				
				-- VS version
				VS__(id__) = 	((
						stm_ref0::VS__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::userUnderDressed <- userUnderDressed,
							stm_ref0::CurtainsOpened <- CurtainsOpened,
							stm_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls,
							stm_ref0::userDistressed <- userDistressed,
							stm_ref0::UserFallen <- UserFallen,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::refuseRequest <- refuseRequest,
							stm_ref0::SupportCalled <- SupportCalled,
							stm_ref0::retryAgreed <- retryAgreed
						]]
						\ {|
							stm_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
			
				-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
				O__(id__) = sbisim(diamond(	((
						stm_ref0::O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::userUnderDressed <- userUnderDressed,
							stm_ref0::CurtainsOpened <- CurtainsOpened,
							stm_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls,
							stm_ref0::userDistressed <- userDistressed,
							stm_ref0::UserFallen <- UserFallen,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::refuseRequest <- refuseRequest,
							stm_ref0::SupportCalled <- SupportCalled,
							stm_ref0::retryAgreed <- retryAgreed
						]]
						\ {|
							stm_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
								
				-- VS_O version
				VS_O__(id__) = sbisim(diamond(	((
						stm_ref0::VS_O__(id__)[[
							stm_ref0::terminate <- terminate,
							stm_ref0::DressingStarted <- DressingStarted,
							stm_ref0::DressingComplete <- DressingComplete,
							stm_ref0::DressingAbandoned <- DressingAbandoned,
							stm_ref0::userUnderDressed <- userUnderDressed,
							stm_ref0::CurtainsOpened <- CurtainsOpened,
							stm_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							stm_ref0::assentToSupportCalls <- assentToSupportCalls,
							stm_ref0::userDistressed <- userDistressed,
							stm_ref0::UserFallen <- UserFallen,
							stm_ref0::roomTemperature <- roomTemperature,
							stm_ref0::refuseRequest <- refuseRequest,
							stm_ref0::SupportCalled <- SupportCalled,
							stm_ref0::retryAgreed <- retryAgreed
						]]
						\ {|
							stm_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
				\ union(
					{|
					|},
					{|
					|}
				)
				[|{|terminate|}|>SKIP
				))
			
				HEXT(id__) = O__(id__) [|shared_variable_events|] SKIP			
	
		endmodule
	
	-- declaring module memory
	Memory(id__) = SKIP
	
	D__(id__) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::D__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls <- assentToSupportCalls,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::SupportCalled <- SupportCalled
						]]
						\ {|
							ctrl_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- visible state equivalent
	
	VS__(id__) = 	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls <- assentToSupportCalls,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::SupportCalled <- SupportCalled
						]]
						\ {|
							ctrl_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					Memory(id__)
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	
	-- O version (optimised)
	
	O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls <- assentToSupportCalls,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::SupportCalled <- SupportCalled
						]]
						\ {|
							ctrl_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- visible state optimised equivalent
	
	VS_O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::VS_O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls <- assentToSupportCalls,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::SupportCalled <- SupportCalled
						]]
						\ {|
							ctrl_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
	-- O version (optimised) with visible assignments
	
	AS_O__(id__) = sbisim(diamond(	(
			(
				(SKIP)
					[|{||}|]
				(
					(
						ctrl_ref0::O__(id__)[[
							ctrl_ref0::terminate <- terminate,
							ctrl_ref0::DressingStarted <- DressingStarted,
							ctrl_ref0::DressingComplete <- DressingComplete,
							ctrl_ref0::DressingAbandoned <- DressingAbandoned,
							ctrl_ref0::CurtainOpenRqt <- CurtainOpenRqt,
							ctrl_ref0::CurtainsOpened <- CurtainsOpened,
							ctrl_ref0::roomTemperature <- roomTemperature,
							ctrl_ref0::userUnderDressed <- userUnderDressed,
							ctrl_ref0::assentToSupportCalls <- assentToSupportCalls,
							ctrl_ref0::userDistressed <- userDistressed,
							ctrl_ref0::UserFallen <- UserFallen,
							ctrl_ref0::retryAgreed <- retryAgreed,
							ctrl_ref0::refuseRequest <- refuseRequest,
							ctrl_ref0::SupportCalled <- SupportCalled
						]]
						\ {|
							ctrl_ref0::retryAgreed
						|}
					)
						[|
							union(
								{|
								|},
								{|
								|}
							)
						|]
					dbisim(Memory(id__))
				)
			)
			\ Union({
				{|
				|},
				{|
				|},
				{|
				|}
			})
			[|{|terminate|}|>SKIP
		)
		\{|terminate|}
	))
	
endmodule
