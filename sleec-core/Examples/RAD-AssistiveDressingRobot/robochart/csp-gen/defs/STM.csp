
--
-- RoboChart generator version 3.0.0.202306261132
-- Automatically generated on 31-08-2023 19:18:09
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module STM
exports
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase

	-- Transition identifiers
	-- declaring identifiers of transitions
	datatype NIDS = 
	              NID_i0|
	              NID_Idle
	
	channel internal__ : NIDS
	
	-- Flow channels		
	channel interrupt
	channel exited
	channel exit
	channel terminate
	
	-- Variable channels
	channel get_temp, set_temp, setL_temp, setR_temp: core_int
	channel get_underdressed, set_underdressed, setL_underdressed, setR_underdressed: core_boolean
	channel get_distressed, set_distressed, setL_distressed, setR_distressed: Distress
	channel get_assent, set_assent, setL_assent, setR_assent: core_boolean
	
	-- Shared variable channels
	
	-- Local variable channels for defined operations that are required by the state machine
	
	-- Declaring state machine events
	channel DressingStarted__: NIDS.InOut
	channel DressingStarted: InOut
	channel DressingComplete__: NIDS.InOut
	channel DressingComplete: InOut
	channel DressingAbandoned__: NIDS.InOut
	channel DressingAbandoned: InOut
	channel retryAgreed__: NIDS.InOut
	channel retryAgreed: InOut
	channel CurtainOpenRqt__: NIDS.InOut
	channel CurtainOpenRqt: InOut
	channel CurtainsOpened__: NIDS.InOut
	channel CurtainsOpened: InOut
	channel roomTemperature__: NIDS.InOut.core_int
	channel roomTemperature: InOut.core_int
	channel UserFallen__: NIDS.InOut
	channel UserFallen: InOut
	channel userUnderDressed__: NIDS.InOut.core_boolean
	channel userUnderDressed: InOut.core_boolean
	channel assentToSupportCalls__: NIDS.InOut.core_boolean
	channel assentToSupportCalls: InOut.core_boolean
	channel userDistressed__: NIDS.InOut.Distress
	channel userDistressed: InOut.Distress
	channel retryAgreed__: NIDS.InOut
	channel retryAgreed: InOut
	channel refuseRequest__: NIDS.InOut
	channel refuseRequest: InOut
	channel SupportCalled__: NIDS.InOut
	channel SupportCalled: InOut
	
	-- Declaring call and ret events for undefined operations
	channel AbandonDressingCall: core_boolean
	channel CallSupportCall: core_boolean
	channel OpenCurtainsCall: core_boolean.Distress
	channel DressingCall: core_int
	
	enterSS = {|
	i0::enter,
	Idle::enter
	|}
	
	enteredSS = 	{|
	Idle::entered
	|}
	
	internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
	
	shared_variable_events = {|
	|}
	
	-- channel set with all visible events
	sem__events = {|
		terminate
	,	DressingStarted,
		DressingComplete,
		DressingAbandoned,
		retryAgreed,
		CurtainOpenRqt,
		CurtainsOpened,
		roomTemperature,
		UserFallen,
		userUnderDressed,
		assentToSupportCalls,
		userDistressed,
		retryAgreed,
		refuseRequest,
		SupportCalled
	,	AbandonDressingCall,
		CallSupportCall,
		OpenCurtainsCall,
		DressingCall
		|}

	-- Nodes --
	-- declaring all nodes
	
	----------------------------------------------------------------------
	-- Initial: i0
	module i0
	exports
	
		channel enter, interrupt
		
		D__(id__) = 
			dbisim(let
				Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
				
				Termination = terminate -> SKIP
				
				Active 		= share__choice(interrupt -> SKIP) ; Inactive
			within
				Inactive [| {terminate} |> SKIP)
		
		VS_O__(id__) = D__(id__)
	
	endmodule
	----------------------------------------------------------------------
	
	
	----------------------------------------------------------------------
	-- State: Idle
	module Idle
	
	enterSS = {}
	
	enteredSS = {}
	
	exports
	
		--  Declarations
		
		channel enter, entered, interrupt
		channel enteredL, enteredR
		
						
		
		--	Nodes
		-- declaring all nodes
		
		
		--	Rule: behaviours(Node)
		--  Note that FDR has problems with efficiently compiling the process below
		-- 	if using a different recursion pattern.
		D__(id__) = 
		dbisim(let
			-- IMPLEMENTATION NOTE: 
			-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
			-- however FDR struggles with that form in certain cases. So we use the exception operator
			-- instead to 'terminate'.
			
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
			
		VS_O__(id__) = 
		dbisim(let
			Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
			
			Termination = terminate -> SKIP
			
			Active 		= SKIP ; 
					 	  Behaviour ; 
					 	  share__choice(exit -> SKIP) ; SKIP ; 
					 	  share__choice(exited -> SKIP) ; Inactive
		
			Behaviour 	= entered -> During
			During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
		within
			Inactive [| {terminate} |> SKIP)
		
	
	endmodule
	----------------------------------------------------------------------
	
	-- END of Nodes --
	
	-- Operation calls --
	-- Only the undefined operations are declared here.
	-- If the state machine is in isolation, all required operations will be undefined.
	-- If it is in the context of a controller, the required operations not provided by the
	-- controller will be declared here, and the defined operations will be defined in the
	-- context of the Controller module, and therefore within scope of the state machine module.
	CALL__AbandonDressing(id__,
				param_assent) 	= AbandonDressingCall.param_assent -> SKIP
	CALL__CallSupport(id__,
				param_assent) 	= CallSupportCall.param_assent -> SKIP
	CALL__OpenCurtains(id__,
				param_underDressed,
				param_distress) 	= OpenCurtainsCall.param_underDressed.param_distress -> SKIP
	CALL__Dressing(id__,
				param_temp) 	= DressingCall.param_temp -> SKIP
	
	-- END of Operation calls --
	
	-- STM processes
	STM(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	STM_VS_O(id__) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
	( 
		(
			(
				(IteratedStateful_VS_O(id__) \ {terminate} ; share__choice(terminate -> SKIP))
			 	[[ share__ <- x__ | x__ <- {||} ]]
			)
		[| {share__} |]
		SKIP
		)
		[| union(sharedVarSync,{terminate}) |]
		dbisim(sharedVarMemory(id__))
	)\sharedVarHide
	
	-- Transitions
	Transitions(id__) = ((let
		Trans = (
			((share__ -> SKIP
			 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((SKIP ; Idle::enter -> SKIP))))
			 	 [] dbisim((true)&(DressingStarted__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(roomTemperature.in?temp -> (SStop /\ set_temp!temp -> SKIP)));share__choice(get_temp?temp -> true&CALL__Dressing(
			 			id__,
			 			temp
			 		));true&(share__choice(DressingComplete.out -> SKIP)) ; Idle::enter -> SKIP)))
			 	 [] dbisim((true)&(CurtainOpenRqt__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(userUnderDressed.in?underdressed -> (SStop /\ set_underdressed!underdressed -> SKIP)));true&(share__choice(userDistressed.in?distressed -> (SStop /\ set_distressed!distressed -> SKIP)));share__choice(get_underdressed?underdressed -> share__choice(get_distressed?distressed -> true&CALL__OpenCurtains(
			 			id__,
			 			underdressed,
			 			distressed
			 		))) ; Idle::enter -> SKIP)))
			 	 [] dbisim((true)&(UserFallen__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP)));share__choice(get_assent?assent -> true&CALL__CallSupport(
			 			id__,
			 			assent
			 		)) ; Idle::enter -> SKIP)))
			 	 [] dbisim((true)&(DressingAbandoned__!NID_Idle.in -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; true&(share__choice(assentToSupportCalls.in?assent -> (SStop /\ set_assent!assent -> SKIP)));share__choice(get_assent?assent -> true&CALL__AbandonDressing(
			 			id__,
			 			assent
			 		)) ; Idle::enter -> SKIP)))
			 ) ; Trans)
			 []
			 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
			 []
			 terminate -> SKIP
		)
	within
		Trans
	)
	)
	
	-- Stateful
	-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
	
	-- Named process definitions
	MachineBody(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::D__(id__)
					   [| { share__, terminate } |] (
					   Idle::D__(id__)
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					DressingStarted__.x____ <- DressingStarted,
					DressingComplete__.x____ <- DressingComplete,
					DressingAbandoned__.x____ <- DressingAbandoned,
					retryAgreed__.x____ <- retryAgreed,
					CurtainOpenRqt__.x____ <- CurtainOpenRqt,
					CurtainsOpened__.x____ <- CurtainsOpened,
					roomTemperature__.x____ <- roomTemperature,
					UserFallen__.x____ <- UserFallen,
					userUnderDressed__.x____ <- userUnderDressed,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					userDistressed__.x____ <- userDistressed,
					retryAgreed__.x____ <- retryAgreed,
					refuseRequest__.x____ <- refuseRequest,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	IteratedBehaviour(id__) = 
		dbisim((MachineBody(id__)\ enteredSS)
		)
	
	Stateful(id__) = 
		((
			(Behaviour(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour(id__)
										[| {|get_assent,set_assent,terminate|} |]
										Memory_assent(true)
									)\{|get_assent,set_assent|}
								)
								[| {|get_distressed,set_distressed,terminate|} |]
								Memory_distressed(Distress_low)
							)\{|get_distressed,set_distressed|}
						)
						[| {|get_underdressed,set_underdressed,terminate|} |]
						Memory_underdressed(true)
					)\{|get_underdressed,set_underdressed|}
				)
				[| {|get_temp,set_temp,terminate|} |]
				Memory_temp(0)
			)\{|get_temp,set_temp|}
		)
		)
	
	-- Visible counterparts
	MachineBody_VS_O(id__) = 
		dbisim((
		let
			finalNodesEntered = {||}
		within
			((let
				-- IMPLEMENTATION NOTE:
				-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
				-- modules for defining the semantics of each node.
				enterSS = {|
				i0::enter,
				Idle::enter
				|}
				hideSet = union(enterSS,{|exit,exited,internal__|})
			within 
				((let
					-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
					-- because CSPM modules are used for the semantics of Node.
					flowevts = union(enterSS,{|exit,exited,interrupt|})
					transSync = {|internal__.NID_i0,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}
				within
					((
					 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
					   i0::VS_O__(id__)
					   [| { share__, terminate } |] (
					   Idle::VS_O__(id__)
					   )
					 )
					 [[Idle::interrupt <- x__ | x__ <- {|interrupt,DressingStarted__.NID_Idle.in,CurtainOpenRqt__.NID_Idle.in,UserFallen__.NID_Idle.in,DressingAbandoned__.NID_Idle.in|}]]
					 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
					 )
					  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
					 )
					 [| union(union(union(flowevts,transSync),{terminate}),{|share__
					|}) |]
					 ((i0::enter -> Transitions(id__))
					  [[ share__ <- x__ | x__ <- {| share__ |} ]]
					 )
					)
					)
				)
				 \ hideSet)
				[[
					DressingStarted__.x____ <- DressingStarted,
					DressingComplete__.x____ <- DressingComplete,
					DressingAbandoned__.x____ <- DressingAbandoned,
					retryAgreed__.x____ <- retryAgreed,
					CurtainOpenRqt__.x____ <- CurtainOpenRqt,
					CurtainsOpened__.x____ <- CurtainsOpened,
					roomTemperature__.x____ <- roomTemperature,
					UserFallen__.x____ <- UserFallen,
					userUnderDressed__.x____ <- userUnderDressed,
					assentToSupportCalls__.x____ <- assentToSupportCalls,
					userDistressed__.x____ <- userDistressed,
					retryAgreed__.x____ <- retryAgreed,
					refuseRequest__.x____ <- refuseRequest,
					SupportCalled__.x____ <- SupportCalled
					| x____ <- NIDS
				]]
			)
			 [| {| interrupt |} |] SKIP)
		)
		)
	
	Behaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	IteratedBehaviour_VS_O(id__) = 
		dbisim((MachineBody_VS_O(id__))
		)
	
	Stateful_VS_O(id__) = 
		dbisim((
			(Behaviour_VS_O(id__) [| union(getsetLocalChannels,{terminate}) |] varMemory(id__))
		 	\getsetLocalChannels
		)
		)
	
	IteratedStateful_VS_O(id__) =
		(dbisim(
			sbisim(
				dbisim(
					sbisim(
						dbisim(
							sbisim(
								dbisim(
									sbisim(
										Behaviour_VS_O(id__)
										[| {|get_assent,set_assent,terminate|} |]
										Memory_assent(true)
									)\{|get_assent,set_assent|}
								)
								[| {|get_distressed,set_distressed,terminate|} |]
								Memory_distressed(Distress_low)
							)\{|get_distressed,set_distressed|}
						)
						[| {|get_underdressed,set_underdressed,terminate|} |]
						Memory_underdressed(true)
					)\{|get_underdressed,set_underdressed|}
				)
				[| {|get_temp,set_temp,terminate|} |]
				Memory_temp(0)
			)\{|get_temp,set_temp|}
		)
		)
	
	-- END
	
	-- Memory
	-- Memory variables
	Memory_temp(temp) =
		get_temp!temp -> Memory_temp(temp)
		[]
		set_temp?x__ -> Memory_temp(x__)
		[]
		terminate -> SKIP
	Memory_underdressed(underdressed) =
		get_underdressed!underdressed -> Memory_underdressed(underdressed)
		[]
		set_underdressed?x__ -> Memory_underdressed(x__)
		[]
		terminate -> SKIP
	Memory_distressed(distressed) =
		get_distressed!distressed -> Memory_distressed(distressed)
		[]
		set_distressed?x__ -> Memory_distressed(x__)
		[]
		terminate -> SKIP
	Memory_assent(assent) =
		get_assent!assent -> Memory_assent(assent)
		[]
		set_assent?x__ -> Memory_assent(x__)
		[]
		terminate -> SKIP
	
	-- varMemory process
	varMemory(id__) = Memory_temp(0)
	[| { terminate } |] (
	Memory_underdressed(true)
	[| { terminate } |] (
	Memory_distressed(Distress_low)
	[| { terminate } |] (
	Memory_assent(true)
	)
	)
	)
	
	getsetLocalChannels = {|get_temp,set_temp,get_underdressed,set_underdressed,get_distressed,set_distressed,get_assent,set_assent|}
	
	-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
	FVS__(id__) = STM_VS_O(id__)
	
	D__(id__) = STM(id__) \ internal_events
	O__(id__) = sbisim(diamond(D__(id__)))
	VS__(id__) = FVS__(id__)
	VS_O__(id__) = sbisim(diamond(FVS__(id__)))
	HEXT__(id__) = O__(id__) [|shared_variable_events|] SKIP
	HUP__(id__) = O__(id__) [|{share__}|] SKIP
	
	-- Shared memory
	-- Shared memory variables
	
	-- sharedVarMemory process
	sharedVarMemory(id__) = terminate -> SKIP
	
	sharedVarSync = {||}
	
	sharedVarHide = {||}
endmodule
